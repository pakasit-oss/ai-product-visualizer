"""
Prompt Generator for AI Product Visualizer
Generates prompts using Google Gemini AI based on product information
"""

import google.generativeai as genai
import config

class PromptGenerator:
    """Generate AI prompts for product visualization using Gemini"""

    def __init__(self):
        self.style_prefix = "Professional product photography, natural lighting, high quality, "

        # Initialize Gemini
        if config.GEMINI_API_KEY:
            genai.configure(api_key=config.GEMINI_API_KEY)
            self.model = genai.GenerativeModel(config.GEMINI_PRO_MODEL)
            self.use_gemini = True
        else:
            print("Warning: GEMINI_API_KEY not found, using template-based prompts")
            self.use_gemini = False

    def generate_prompt(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        custom_details: str = ""
    ) -> str:
        """
        Generate a prompt for image generation using Gemini AI

        Args:
            product_category: Type of product (e.g., "รองเท้า (Shoes)")
            gender: Gender of model (e.g., "ชาย (Male)")
            age_range: Age range of model (e.g., "18-25")
            custom_details: Additional custom details

        Returns:
            Complete prompt string generated by Gemini
        """
        if self.use_gemini:
            return self._generate_with_gemini(
                product_category, gender, age_range, custom_details
            )
        else:
            return self._generate_template_based(
                product_category, gender, age_range, custom_details
            )

    def _generate_with_gemini(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        custom_details: str = ""
    ) -> str:
        """Generate prompt using Gemini AI"""
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)

        gemini_instruction = f"""
You are a professional photographer describing the exact scene for an AI image generator to create an affiliate marketing photo.

Product: {product_en}
Model: {gender_en}, age {age_range}
{f"Special notes: {custom_details}" if custom_details else ""}

Create ONE complete, natural-sounding description of the photo as if you're describing it to another photographer. Include:

- The exact scene and environment (Thai cafe, outdoor, indoor, etc.)
- The person and what they're wearing/doing
- How the product appears in the shot
- Lighting and atmosphere
- Camera angle and framing
- Overall mood and style

Write it as ONE flowing paragraph, like describing a real photo. Be specific about the product placement and visibility.

Example format: "A young Thai woman sitting at a modern outdoor cafe in Bangkok, wearing white Nike Air Max sneakers with red accents clearly visible on her feet, natural afternoon sunlight streaming through tropical plants, shot from a low angle to emphasize the shoes, casual Instagram-style photo, 9:16 vertical format"

Write ONLY the description, nothing else.
"""

        try:
            print("🔮 Calling Gemini API to generate prompt...")
            response = self.model.generate_content(gemini_instruction)
            prompt = response.text.strip()
            print(f"✅ [Gemini Success]: {prompt[:150]}...")
            print(f"📏 Prompt length: {len(prompt)} characters")
            return prompt
        except Exception as e:
            print(f"❌ Gemini API error: {e}")
            print(f"⚠️  Falling back to template-based prompt generation")
            print(f"💡 Check your GEMINI_API_KEY in the sidebar")
            return self._generate_template_based(
                product_category, gender, age_range, custom_details
            )

    def _generate_template_based(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        custom_details: str = ""
    ) -> str:
        """Fallback template-based prompt generation - IMPROVED VERSION"""
        # Extract English names from Thai-English labels
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)

        # Build enhanced model description
        age_desc = self._get_age_description(age_range)
        if gender_en.lower() == "male":
            model_type = f"Thai {age_desc} man"
        elif gender_en.lower() == "female":
            model_type = f"Thai {age_desc} woman"
        else:
            model_type = f"Thai {age_desc} person"

        # Build enhanced product context for affiliate marketing
        if product_en.lower() == "shoes":
            scene = f"wearing stylish {product_en}, full body shot showing the product clearly"
        else:
            scene = f"wearing/using {product_en}, product prominently displayed"

        # Create professional affiliate marketing prompt with SPECIFIC DETAILS
        prompt_parts = [
            "Professional product photography for Instagram affiliate marketing.",
            f"A {model_type} {scene}.",
            f"The {product_en} should be clearly visible, well-lit, and in sharp focus.",
            "Photo taken in a trendy Thai cafe with large windows and natural sunlight.",
            "Green tropical plants and modern wooden furniture create a relaxed atmosphere.",
            "The model is positioned to showcase the product naturally.",
            "Authentic lifestyle shot, not posed or artificial.",
            "Bright, airy, Instagram-worthy aesthetic.",
            "Captured on smartphone camera with natural lighting.",
            "Vertical 9:16 portrait format optimized for social media.",
            "Professional quality, high resolution, commercial photography style."
        ]

        if custom_details:
            prompt_parts.insert(3, custom_details)

        return " ".join(prompt_parts)

    def _extract_english(self, text: str) -> str:
        """Extract English text from Thai-English label"""
        if "(" in text and ")" in text:
            # Extract text between parentheses
            return text.split("(")[1].split(")")[0].strip()
        return text.strip()

    def _build_model_description(self, gender: str, age_range: str) -> str:
        """Build description of the model"""
        gender_lower = gender.lower()

        # Use neutral, non-specific descriptions
        if gender_lower == "male":
            model_type = "man"
        elif gender_lower == "female":
            model_type = "woman"
        else:  # Unisex
            model_type = "person"

        age_desc = self._get_age_description(age_range)

        return f"{age_desc} {model_type},"

    def _get_age_description(self, age_range: str) -> str:
        """Get age description from age range"""
        age_descriptions = {
            "18-25": "young adult",
            "26-35": "adult",
            "36-50": "middle-aged",
            "50+": "mature"
        }
        return age_descriptions.get(age_range, "adult")

    def _build_product_context(self, product: str) -> str:
        """Build context for the product"""
        product_lower = product.lower()

        product_contexts = {
            "shoes": "wearing stylish shoes, full body photograph, standing naturally,",
            "clothing": "wearing fashionable outfit, full body photograph, casual stance,",
            "bags": "carrying designer bag, lifestyle photograph showing the bag clearly,",
            "watch": "wearing wristwatch, close-up photograph of wrist,",
            "sunglasses": "wearing sunglasses, portrait photograph,",
            "jewelry": "wearing jewelry, close-up photograph highlighting the accessory,",
            "hat": "wearing hat, portrait photograph,",
            "belt": "wearing belt, photograph showing outfit detail,",
        }

        return product_contexts.get(product_lower, f"with {product}, lifestyle photograph,")

    def edit_prompt(self, original_prompt: str, modifications: str) -> str:
        """
        Edit an existing prompt with modifications

        Args:
            original_prompt: The original prompt
            modifications: Modifications to apply

        Returns:
            Modified prompt
        """
        return f"{original_prompt} {modifications}"

    def generate_image_prompt_v2(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        photo_style: str = "iPhone Candid",
        location: str = "Minimal Background",
        camera_angle: str = "Waist Down",
        custom_details: str = ""
    ) -> str:
        """
        Generate prompt for product photography (NEW VERSION - No Face, Product Focus)

        Args:
            product_category: Product type
            gender: Model gender
            age_range: Model age range
            photo_style: Photography style
            location: Location/setting
            camera_angle: Camera angle/framing
            custom_details: Additional details

        Returns:
            Complete prompt optimized for product photography
        """
        if self.use_gemini:
            return self._generate_image_v2_with_gemini(
                product_category, gender, age_range, photo_style,
                location, camera_angle, custom_details
            )
        else:
            return self._generate_image_v2_template(
                product_category, gender, age_range, photo_style,
                location, camera_angle, custom_details
            )

    def _generate_image_v2_with_gemini(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        photo_style: str,
        location: str,
        camera_angle: str,
        custom_details: str
    ) -> str:
        """Generate image prompt V2 using Gemini"""
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)
        age_desc = self._get_age_description(age_range)

        # Extract style keywords
        style_clean = photo_style.split('(')[0].strip()
        location_clean = location.split('(')[0].strip()
        angle_clean = camera_angle.split('(')[0].strip()

        gemini_instruction = f"""
You are creating a product photography prompt for affiliate marketing.

CRITICAL REQUIREMENTS:
- NO FACE shown in the photo
- Focus ONLY on the product and body from waist/chest down
- Product must be clearly visible and well-lit
- Natural, candid style (not overly posed)

Product: {product_en}
Model: Thai {gender_en}, age {age_range} ({age_desc})
Style: {style_clean}
Location: {location_clean}
Camera Angle: {angle_clean}
{f"Additional: {custom_details}" if custom_details else ""}

Create a detailed prompt following this structure:

"A {gender_en} is standing in a natural pose, wearing [outfit description]. The image is cropped to show only from [camera angle specification], clearly displaying the {product_en}. Her/His pose is relaxed, with [natural pose details]. Background is {location_clean.lower()} and softly blurred. Lighting is {style_clean.lower()} with no harsh shadows. The photo is shot in {style_clean.lower()} style. Focus is sharp on the product area. NO FACE VISIBLE."

Write ONLY the final prompt, nothing else.
"""

        try:
            print("🔮 Calling Gemini for V2 prompt...")
            response = self.model.generate_content(gemini_instruction)
            prompt = response.text.strip()
            print(f"✅ V2 Prompt: {prompt[:100]}...")
            return prompt
        except Exception as e:
            print(f"❌ Gemini error: {e}, using template")
            return self._generate_image_v2_template(
                product_category, gender, age_range, photo_style,
                location, camera_angle, custom_details
            )

    def _generate_image_v2_template(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        photo_style: str,
        location: str,
        camera_angle: str,
        custom_details: str
    ) -> str:
        """Template-based image prompt V2"""
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)
        age_desc = self._get_age_description(age_range)

        # Build model description
        model_desc = f"Thai {age_desc} {gender_en.lower()}"

        # Camera angle specifications
        angle_specs = {
            "Waist Down": "from the waist down",
            "Full Body": "full body",
            "Close-up Product Focus": "close-up on the product area",
            "Mid Shot": "from the chest down"
        }
        angle_text = angle_specs.get(camera_angle.split('(')[0].strip(), "from the waist down")

        # Lighting based on style
        lighting_specs = {
            "iPhone Candid": "bright and even (not warm)",
            "Professional Studio": "professional studio lighting",
            "Minimal Clean": "soft and diffused",
            "Lifestyle Natural": "natural daylight",
            "Fashion Editorial": "dramatic and directional"
        }
        style_key = photo_style.split('(')[0].strip()
        lighting = lighting_specs.get(style_key, "bright and even")

        # Background based on location
        bg_specs = {
            "Minimal Background": "minimal and softly blurred",
            "Thai Cafe": "modern Thai cafe, naturally blurred background",
            "Urban Street": "urban street setting, background out of focus",
            "Modern Studio": "clean studio backdrop",
            "Outdoor Natural": "natural outdoor setting with soft bokeh",
            "Home Interior": "cozy home interior, blurred background",
            "Shopping Mall": "modern shopping mall, background naturally blurred"
        }
        location_key = location.split('(')[0].strip()
        background = bg_specs.get(location_key, "minimal and softly blurred")

        # Build prompt
        prompt_parts = [
            f"A {model_desc} is standing in a natural pose, wearing a simple, casual outfit.",
            f"The image is cropped to show only {angle_text}, clearly displaying the {product_en}.",
            "The pose is relaxed, with one leg slightly bent or positioned forward for a natural look.",
            f"Background is {background}.",
            f"Lighting is {lighting}, with no harsh shadows.",
            f"The photo is shot in a candid {style_key.lower()} style — slightly off-center, realistic, and unfiltered.",
            "Focus is sharp on the product area.",
            "NO FACE VISIBLE in the frame."
        ]

        if custom_details:
            prompt_parts.insert(-2, custom_details)

        return " ".join(prompt_parts)

    def generate_video_prompt(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        location: str = "Minimal Background",
        custom_details: str = ""
    ) -> str:
        """
        Generate prompt for product video (Veo3)

        Args:
            product_category: Product type
            gender: Model gender
            age_range: Model age range
            location: Location/setting
            custom_details: Additional details

        Returns:
            Complete video prompt
        """
        if self.use_gemini:
            return self._generate_video_with_gemini(
                product_category, gender, age_range, location, custom_details
            )
        else:
            return self._generate_video_template(
                product_category, gender, age_range, location, custom_details
            )

    def _generate_video_with_gemini(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        location: str,
        custom_details: str
    ) -> str:
        """Generate video prompt using Gemini - iPhone candid style"""
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)
        location_clean = location.split('(')[0].strip()

        gemini_instruction = f"""
You are creating a natural, iPhone-style video prompt for product showcase using Veo3 AI.

CRITICAL REQUIREMENTS:
- NO FACE shown in the video
- Camera focused ONLY on legs and product
- Low camera angle
- Natural walking motion with product showcase
- Product must be clearly visible throughout
- Candid iPhone-style video (steady, natural, clear)

Product: {product_en}
Model: {gender_en}
Location: {location_clean}
{f"Additional: {custom_details}" if custom_details else ""}

Create a video prompt following this EXACT STRUCTURE:

"A {gender_en.lower()} is standing in a natural pose, wearing a casual outfit and [product with adjective like 'a pair of stylish shoes']. She/He gently lifts one foot with her/his toes touching the ground, pointing slightly down to highlight the [alternative product name like 'footwear']. After a brief pause, she/he slowly starts walking forward in a relaxed, smooth motion. The camera stays low and focused only on her/his legs and {product_en} — no face shown. Lighting is [soft and natural/warm and natural/natural daylight depending on location], with no harsh shadows. The video has a candid, iPhone-style feel with steady framing and clear focus on the [alternative product name] throughout."

IMPORTANT NOTES:
- Use simple gender: just "woman" or "man" (not "Thai woman")
- Add descriptive adjective to product (e.g., "stylish", "sleek", "fashionable")
- Use alternative product names for variety (shoes→footwear, bags→accessory, watch→timepiece)
- Keep it natural and flowing like describing a real candid video

Write ONLY the final prompt, nothing else.
"""

        try:
            print("🔮 Calling Gemini for video prompt...")
            response = self.model.generate_content(gemini_instruction)
            prompt = response.text.strip()
            print(f"✅ Video Prompt: {prompt[:100]}...")
            return prompt
        except Exception as e:
            print(f"❌ Gemini error: {e}, using template")
            return self._generate_video_template(
                product_category, gender, age_range, location, custom_details
            )

    def _generate_video_template(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        location: str,
        custom_details: str
    ) -> str:
        """Template-based video prompt - Natural iPhone style"""
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)

        # Simple gender description (like the example)
        model_desc = f"{gender_en.lower()}" if gender_en.lower() in ["woman", "man"] else "person"
        pronoun = "she" if gender_en.lower() in ["female", "woman"] else "he"
        possessive = "her" if gender_en.lower() in ["female", "woman"] else "his"

        # Product with descriptive adjective
        product_descriptions = {
            "shoes": "a pair of stylish shoes",
            "clothing": "a fashionable outfit",
            "bags": "a stylish bag",
            "watch": "a sleek watch",
            "sunglasses": "stylish sunglasses",
            "jewelry": "elegant jewelry",
            "hat": "a trendy hat",
            "belt": "a stylish belt"
        }
        product_desc = product_descriptions.get(product_en.lower(), product_en)

        # Alternative product name (for variety)
        product_alt_names = {
            "shoes": "footwear",
            "bags": "accessory",
            "watch": "timepiece",
            "sunglasses": "eyewear",
            "jewelry": "accessory",
            "hat": "headwear",
            "belt": "accessory"
        }
        product_alt = product_alt_names.get(product_en.lower(), product_en)

        # Location lighting
        location_key = location.split('(')[0].strip()
        lighting_map = {
            "Minimal Background": "soft and natural",
            "Thai Cafe": "warm and natural",
            "Urban Street": "natural daylight",
            "Modern Studio": "soft studio lighting",
            "Outdoor Natural": "natural outdoor lighting",
            "Home Interior": "soft indoor lighting",
            "Shopping Mall": "bright and even"
        }
        lighting = lighting_map.get(location_key, "soft and natural")

        # Build prompt with natural flow (like the example)
        prompt = f"""A {model_desc} is standing in a natural pose, wearing a casual outfit and {product_desc}. {pronoun.capitalize()} gently lifts one foot with {possessive} toes touching the ground, pointing slightly down to highlight the {product_alt}. After a brief pause, {pronoun} slowly starts walking forward in a relaxed, smooth motion. The camera stays low and focused only on {possessive} legs and {product_en} — no face shown. Lighting is {lighting}, with no harsh shadows. The video has a candid, iPhone-style feel with steady framing and clear focus on the {product_alt} throughout."""

        if custom_details:
            prompt += f" {custom_details}"

        return prompt

    def generate_prompt_for_sdxl(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        custom_details: str = ""
    ) -> str:
        """
        Generate a realistic ad-style prompt for Stable Diffusion XL using Gemini
        Optimized for product-focused affiliate marketing content

        Args:
            product_category: Type of product (e.g., "รองเท้า (Shoes)")
            gender: Gender of model (e.g., "ชาย (Male)")
            age_range: Age range of model (e.g., "18-25")
            custom_details: Additional custom details

        Returns:
            Complete prompt string optimized for SDXL
        """
        if self.use_gemini:
            return self._generate_sdxl_with_gemini(
                product_category, gender, age_range, custom_details
            )
        else:
            return self._generate_sdxl_template(
                product_category, gender, age_range, custom_details
            )

    def _generate_sdxl_with_gemini(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        custom_details: str = ""
    ) -> str:
        """Generate SDXL prompt using Gemini AI"""
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)

        gemini_instruction = f"""
You are an expert at creating prompts for Stable Diffusion XL image generation for affiliate marketing.

Create a PRODUCT-FOCUSED prompt with these requirements:

Product: {product_en}
Model Gender: Thai {gender_en}
Model Age: {age_range} years
Additional: {custom_details if custom_details else "None"}

CRITICAL REQUIREMENTS:
1. PRODUCT MUST match reference image EXACTLY (same color, design, brand, texture)
2. Product occupies 60-70% of frame - it's the MAIN subject
3. NO FACE visible - focus on product only
4. Model in background/context only, product is hero
5. Professional product photography style
6. Natural lighting, 9:16 vertical format
7. Clean, modern Thai setting
8. Reference image fidelity is ABSOLUTE PRIORITY

Generate a detailed SDXL prompt (max 200 words) that FORCES the AI to:
- Match the reference product EXACTLY
- Make product the dominant visual element
- Use reference as strict guide

Return ONLY the prompt, no explanations.
"""

        try:
            response = self.model.generate_content(gemini_instruction)
            prompt = response.text.strip()
            print(f"[Gemini SDXL Prompt]: {prompt[:100]}...")
            return prompt
        except Exception as e:
            print(f"Gemini API error: {e}, falling back to template")
            return self._generate_sdxl_template(
                product_category, gender, age_range, custom_details
            )

    def _generate_sdxl_template(
        self,
        product_category: str,
        gender: str,
        age_range: str,
        custom_details: str = ""
    ) -> str:
        """Fallback SDXL template"""
        # Extract English names from Thai-English labels
        product_en = self._extract_english(product_category)
        gender_en = self._extract_english(gender)

        # Build gender text
        gender_text = f"Thai {gender_en.lower()}" if gender_en.lower() in ["male", "female"] else "Thai person"

        # ULTRA PRECISE STRATEGY - บังคับให้ยึด reference 100%
        # เน้นคำว่า "exactly as reference" หลายจุด
        prompt_parts = [
            f"PRODUCT-FOCUSED PHOTOGRAPHY: The {product_en} is the main subject and must appear EXACTLY as shown in the reference image.",
            f"REFERENCE FIDELITY: Match the reference photo PRECISELY - identical color, design, brand logo, texture, and all details.",
            "COMPOSITION: Product occupies 60-70% of frame, person in background/context only.",
            "NO FACE SHOWN: Focus camera angle to avoid showing face - emphasize product visibility.",
            "CRITICAL INSTRUCTION: Do not change, modify, or deviate from the reference product in ANY way.",
            "PRODUCT FIRST: Use reference image as exact guide - product appearance takes absolute priority.",
            "STYLE: Clean product photography, natural lighting, 9:16 vertical format, professional quality."
        ]

        if custom_details:
            prompt_parts.append(custom_details)

        # Add technical details
        prompt_parts.append(
            "Sharp focus, professional product photography, clean composition"
        )

        return " ".join(prompt_parts)

    def _get_sdxl_scene(self, product: str) -> str:
        """Get appropriate scene for SDXL generation"""
        product_lower = product.lower()

        scenes = {
            "shoes": "clean modern garden cafe, standing slightly sideways showing both shoes",
            "clothing": "contemporary outdoor setting, full body showing the outfit",
            "bags": "urban lifestyle setting, holding the bag prominently",
            "watch": "minimalist cafe interior, close-up of wrist showing the watch",
            "sunglasses": "bright outdoor terrace, portrait style showing sunglasses",
            "jewelry": "elegant indoor setting, close-up highlighting the jewelry",
            "hat": "outdoor garden setting, portrait showing the hat clearly",
            "belt": "modern cafe interior, outfit detail showing the belt",
        }

        return scenes.get(product_lower, "modern lifestyle setting")


# Example usage
if __name__ == "__main__":
    generator = PromptGenerator()

    # Test prompt generation
    prompt = generator.generate_prompt(
        product_category="รองเท้า (Shoes)",
        gender="ชาย (Male)",
        age_range="18-25"
    )

    print("Generated Prompt:")
    print(prompt)
    print("\n" + "="*80 + "\n")

    # Test with custom details
    prompt_custom = generator.generate_prompt(
        product_category="กระเป๋า (Bags)",
        gender="หญิง (Female)",
        age_range="26-35",
        custom_details="luxury urban setting, city background"
    )

    print("Generated Prompt with Custom Details:")
    print(prompt_custom)
