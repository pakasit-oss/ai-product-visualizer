"""
AI Product Visualizer - Streamlit Application
Main UI for generating product visualization images and videos
"""

import streamlit as st
import pandas as pd
from pathlib import Path
from datetime import datetime
from PIL import Image
import os
import random

# Import local modules
import config
from prompt_generator import PromptGenerator
from dalle_generator import DALLEGenerator
from kie_generator import KieGenerator
from veo_video_creator import Veo3VideoCreator
from sora2_video_creator import Sora2VideoCreator

# Import VideoCreator with optional moviepy support
try:
    from video_creator import VideoCreator
    VIDEO_CREATOR_AVAILABLE = True
except ImportError as e:
    VIDEO_CREATOR_AVAILABLE = False
    VideoCreator = None
    print(f"VideoCreator not available: {e}")


# Page configuration
st.set_page_config(
    page_title="AI Product Visualizer",
    page_icon="üé®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'generated_images' not in st.session_state:
    st.session_state.generated_images = []

if 'gallery_images' not in st.session_state:
    st.session_state.gallery_images = []

if 'prompts_data' not in st.session_state:
    st.session_state.prompts_data = []

if 'video_path' not in st.session_state:
    st.session_state.video_path = None

if 'generated_videos' not in st.session_state:
    st.session_state.generated_videos = []

if 'current_prompt' not in st.session_state:
    st.session_state.current_prompt = ""

if 'prompt_generated' not in st.session_state:
    st.session_state.prompt_generated = False

if 'ai_engine' not in st.session_state:
    st.session_state.ai_engine = "DALL¬∑E 3 (‡∏õ‡∏Å‡∏ï‡∏¥)"

if 'uploaded_reference_images' not in st.session_state:
    st.session_state.uploaded_reference_images = []

if 'saved_openai_key' not in st.session_state:
    st.session_state.saved_openai_key = ""

if 'saved_replicate_token' not in st.session_state:
    st.session_state.saved_replicate_token = ""

if 'saved_gemini_key' not in st.session_state:
    st.session_state.saved_gemini_key = ""

if 'saved_kie_key' not in st.session_state:
    st.session_state.saved_kie_key = ""

if 'saved_imgbb_key' not in st.session_state:
    st.session_state.saved_imgbb_key = ""


def load_saved_api_keys():
    """Load saved API keys from .env.local file"""
    env_file = Path(".env.local")
    if env_file.exists():
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('OPENAI_API_KEY='):
                        st.session_state.saved_openai_key = line.split('=', 1)[1].strip('"').strip("'")
                    elif line.startswith('REPLICATE_API_TOKEN='):
                        st.session_state.saved_replicate_token = line.split('=', 1)[1].strip('"').strip("'")
                    elif line.startswith('GEMINI_API_KEY='):
                        st.session_state.saved_gemini_key = line.split('=', 1)[1].strip('"').strip("'")
                    elif line.startswith('KIE_API_KEY='):
                        st.session_state.saved_kie_key = line.split('=', 1)[1].strip('"').strip("'")
                    elif line.startswith('IMGBB_API_KEY='):
                        st.session_state.saved_imgbb_key = line.split('=', 1)[1].strip('"').strip("'")
        except Exception as e:
            print(f"Error loading API keys: {e}")


def save_api_keys(openai_key, replicate_token, gemini_key, kie_key, imgbb_key):
    """Save API keys to .env.local file"""
    env_file = Path(".env.local")
    try:
        with open(env_file, 'w') as f:
            if openai_key:
                f.write(f'OPENAI_API_KEY="{openai_key}"\n')
            if replicate_token:
                f.write(f'REPLICATE_API_TOKEN="{replicate_token}"\n')
            if gemini_key:
                f.write(f'GEMINI_API_KEY="{gemini_key}"\n')
            if kie_key:
                f.write(f'KIE_API_KEY="{kie_key}"\n')
            if imgbb_key:
                f.write(f'IMGBB_API_KEY="{imgbb_key}"\n')
        st.session_state.saved_openai_key = openai_key
        st.session_state.saved_replicate_token = replicate_token
        st.session_state.saved_gemini_key = gemini_key
        st.session_state.saved_kie_key = kie_key
        st.session_state.saved_imgbb_key = imgbb_key
        return True
    except Exception as e:
        print(f"Error saving API keys: {e}")
        return False


def initialize_generators():
    """Initialize all generators"""
    try:
        prompt_gen = PromptGenerator()
        dalle_gen = DALLEGenerator()
        video_creator = VideoCreator()
        return prompt_gen, dalle_gen, video_creator
    except Exception as e:
        st.error(f"Error initializing generators: {str(e)}")
        return None, None, None


def generate_random_prompt_settings(product_category: str, gender: str, age_range: str):
    """
    Generate random prompt settings that match product, gender, and age

    Args:
        product_category: Product category
        gender: Gender
        age_range: Age range

    Returns:
        Dict with random photo_style, location, camera_angle
    """
    # Filter locations and styles based on product category
    if "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤" in product_category or "Shoes" in product_category:
        suitable_locations = [
            "Minimal Background (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)",
            "Modern Cafe (‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô)",
            "Urban Street (‡∏ñ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á)",
            "Beach (‡∏ä‡∏≤‡∏¢‡∏´‡∏≤‡∏î)",
            "Shopping Mall (‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)",
            "Park (‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)",
            "Rooftop (‡∏î‡∏≤‡∏î‡∏ü‡πâ‡∏≤)"
        ]
        suitable_angles = [
            "Waist Down (‡πÄ‡∏≠‡∏ß‡∏•‡∏á‡∏°‡∏≤ - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤/‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á)",
            "Full Body (‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß)",
            "Low Angle (‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≥ - ‡πÄ‡∏ô‡πâ‡∏ô‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤)"
        ]
    elif "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤" in product_category or "Bag" in product_category:
        suitable_locations = [
            "Minimal Background (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)",
            "Modern Cafe (‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô)",
            "Shopping Mall (‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)",
            "Hotel Lobby (‡∏•‡πá‡∏≠‡∏ö‡∏ö‡∏µ‡πâ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°)",
            "Airport (‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô)",
            "Office (‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®)"
        ]
        suitable_angles = [
            "Upper Body (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡∏ô)",
            "Close Up (‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î)",
            "Full Body (‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß)"
        ]
    else:
        # Default for other products
        suitable_locations = config.LOCATIONS
        suitable_angles = config.CAMERA_ANGLES

    # Filter photo styles based on age range
    if "18-25" in age_range or "26-35" in age_range:
        suitable_styles = [
            "iPhone Candid (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)",
            "Street Style (‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ñ‡∏ô‡∏ô)",
            "Casual Lifestyle (‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏ö‡∏≤‡∏¢‡πÜ)",
            "Urban Modern (‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á)"
        ]
    elif "36-45" in age_range or "46+" in age_range:
        suitable_styles = [
            "Professional Portrait (‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏ó‡∏£‡∏ï‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û)",
            "Business Casual (‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏ö‡∏≤‡∏¢‡πÜ)",
            "Lifestyle Magazine (‡∏ô‡∏¥‡∏ï‡∏¢‡∏™‡∏≤‡∏£‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå)",
            "Elegant Minimal (‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤)"
        ]
    else:
        suitable_styles = config.PHOTO_STYLES

    # Random select
    return {
        'photo_style': random.choice(suitable_styles),
        'location': random.choice(suitable_locations),
        'camera_angle': random.choice(suitable_angles)
    }


def one_click_generation(images_per_product=3, video_method="Sora 2"):
    """
    One click to generate multiple images and videos automatically

    Args:
        images_per_product: Number of images to generate per product (with different prompts)
        video_method: "Sora 2" or "Veo3"
    """

    st.info(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô One Click Generation... (‡∏™‡∏£‡πâ‡∏≤‡∏á {images_per_product} ‡∏£‡∏π‡∏õ/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + {images_per_product} ‡∏Ñ‡∏•‡∏¥‡∏õ/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡πâ‡∏á uploaded ‡πÅ‡∏•‡∏∞ batch)
    uploaded_images = st.session_state.uploaded_reference_images if st.session_state.uploaded_reference_images else []
    batch_images = st.session_state.batch_products if 'batch_products' in st.session_state else []

    # ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å batch ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    reference_images = uploaded_images if uploaded_images else batch_images

    if not reference_images or len(reference_images) == 0:
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô!")
        st.info("üí° ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå'")
        return

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï uploaded_reference_images ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
    st.session_state.uploaded_reference_images = reference_images

    # Get settings from session state or use defaults
    product_category = st.session_state.get('oneclick_product_category', "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤ (Shoes)")
    gender = st.session_state.get('oneclick_gender', "Unisex")
    age_range = st.session_state.get('oneclick_age_range', "18-25")
    ai_engine = st.session_state.get('ai_engine', 'Kie.ai Nano Banana (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î! ‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter)')

    # Step 1 & 2: Generate Multiple Images per Product with Random Prompts
    num_products = len(st.session_state.uploaded_reference_images)
    total_images = num_products * images_per_product

    st.info(f"""
    üé® Step 1/3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û {total_images} ‡∏†‡∏≤‡∏û
    - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {num_products} ‡∏ä‡∏¥‡πâ‡∏ô
    - ‡∏£‡∏π‡∏õ‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {images_per_product} ‡∏£‡∏π‡∏õ (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
    """)

    # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ
    old_images_count = len(st.session_state.generated_images)

    # Track newly created images
    images_created_count = 0
    prompt_gen = PromptGenerator()

    progress_bar = st.progress(0)
    total_progress = 0

    for product_idx, ref_image_path in enumerate(st.session_state.uploaded_reference_images):

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÉ‡∏ä‡πâ prompt ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
        for variation_idx in range(images_per_product):
            status_container = st.empty()

            try:
                # ‡∏™‡∏∏‡πà‡∏° prompt settings ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ variation
                random_settings = generate_random_prompt_settings(
                    product_category=product_category,
                    gender=gender,
                    age_range=age_range
                )

                photo_style = random_settings['photo_style']
                location = random_settings['location']
                camera_angle = random_settings['camera_angle']

                # Generate prompt
                generated_prompt = prompt_gen.generate_image_prompt_v2(
                    product_category=product_category,
                    gender=gender,
                    age_range=age_range,
                    photo_style=photo_style,
                    location=location,
                    camera_angle=camera_angle,
                    custom_details=""
                )

                status_container.info(f"""
                üì∏ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà {product_idx + 1}/{num_products} - ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà {variation_idx + 1}/{images_per_product}
                - ‡πÑ‡∏ü‡∏•‡πå: {Path(ref_image_path).name}
                - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {location}
                - ‡∏™‡πÑ‡∏ï‡∏•‡πå: {photo_style}
                """)

                # Set uploaded_reference_images to only current image
                temp_uploaded = [ref_image_path]
                original_uploaded = st.session_state.uploaded_reference_images.copy()
                st.session_state.uploaded_reference_images = temp_uploaded

                # Generate 1 image for this variation
                generate_images_from_prompt(
                    prompt=generated_prompt,
                    product_category=product_category,
                    gender=gender,
                    age_range=age_range,
                    num_images=1,
                    ai_engine=ai_engine,
                    photo_style=photo_style,
                    location=location,
                    camera_angle=camera_angle,
                    skip_display=True
                )

                # Restore uploaded_reference_images
                st.session_state.uploaded_reference_images = original_uploaded

                images_created_count += 1
                total_progress += 1
                status_container.success(f"‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà {product_idx + 1}/{num_products} - ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà {variation_idx + 1}/{images_per_product} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                progress_bar.progress(total_progress / total_images)

            except Exception as e:
                error_msg = str(e)
                status_container.error(f"‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏π‡∏õ: {error_msg[:100]}")
                print(f"ERROR in one_click_generation: Product {product_idx + 1}, Variation {variation_idx + 1}: {error_msg}")
                # Restore uploaded_reference_images
                st.session_state.uploaded_reference_images = original_uploaded
                total_progress += 1
                progress_bar.progress(total_progress / total_images)
                continue

    progress_bar.empty()

    if images_created_count == 0:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        return

    st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß {images_created_count}/{total_images} ‡∏†‡∏≤‡∏û!")

    # Step 2: Create Videos
    st.info(f"üé¨ Step 2/3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ {video_method} AI ({images_created_count} ‡∏Ñ‡∏•‡∏¥‡∏õ - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß)...")

    try:
        # Use only newly created images (from old_images_count onwards)
        newly_created_images = st.session_state.generated_images[old_images_count:]

        if newly_created_images:
            # Initialize video creator and Kie.ai (for imgbb upload)
            from kie_generator import KieGenerator
            kie_gen = KieGenerator()

            # Check API keys only for AI methods
            if video_method != "Quick Video (MoviePy)":
                if not config.KIE_API_KEY:
                    st.error(f"‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ KIE_API_KEY ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ {video_method}")
                    return

                if not config.IMGBB_API_KEY:
                    st.error("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ IMGBB_API_KEY ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û")
                    return

            # Initialize correct video creator
            if video_method == "Quick Video (MoviePy)":
                from video_creator import VideoCreator
                video_creator = VideoCreator(duration_per_image=5)  # 5 seconds per image
                est_time_per_video = "instant"
                use_ai = False
            elif video_method == "Veo3":
                from veo_video_creator import Veo3VideoCreator
                video_creator = Veo3VideoCreator()
                est_time_per_video = "10-30"
                use_ai = True
            else:  # Sora 2
                from sora2_video_creator import Sora2VideoCreator
                video_creator = Sora2VideoCreator()
                est_time_per_video = "3-5"
                use_ai = True

            videos_created = 0
            video_progress = st.progress(0)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            if use_ai:
                st.info(f"""
                ‚è≥ **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏õ (Sequential) - ‡∏£‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ï‡πà‡∏≠‡πÑ‡∏õ**
                - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°: {len(newly_created_images)} ‡∏Ñ‡∏•‡∏¥‡∏õ
                - ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {len(newly_created_images) * int(est_time_per_video.split('-')[0])}-{len(newly_created_images) * int(est_time_per_video.split('-')[1])} ‡∏ô‡∏≤‡∏ó‡∏µ
                - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠ {video_method} AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß

                ‚ö†Ô∏è **‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á** - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏õ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö
                """)
            else:
                st.info(f"""
                ‚ö° **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ MoviePy (‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß!)**
                - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°: {len(newly_created_images)} ‡∏Ñ‡∏•‡∏¥‡∏õ
                - ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ AI)
                - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ö‡∏ö slideshow ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                """)

            # Create preview container for completed videos
            st.divider()
            preview_header = st.empty()
            preview_container = st.container()
            st.divider()

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û (‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
            for idx, img_data in enumerate(newly_created_images):
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_status = st.empty()
                video_status = st.empty()

                try:
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏´‡∏ô
                    current_status.info(f"""
                    üé¨ **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {idx + 1}/{len(newly_created_images)}** (‡∏£‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏ó‡∏≥‡∏ï‡πà‡∏≠)
                    - ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: `{Path(img_data['path']).name}`
                    - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...
                    """)

                    import time
                    start_time = time.time()

                    # Quick Video (MoviePy) - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                    if video_method == "Quick Video (MoviePy)":
                        video_status.info(f"‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ MoviePy (‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)...")

                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                        filename = f"oneclick_quick_product{idx + 1}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
                        video_path = video_creator.create_video(
                            image_paths=[img_data['path']],
                            filename=filename
                        )

                        result = {
                            'path': str(video_path),
                            'url': None,
                            'task_id': 'moviepy_quick',
                            'prompt': 'Quick slideshow video'
                        }

                        elapsed = int(time.time() - start_time)
                        video_status.success(f"‚úÖ MoviePy ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {elapsed} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")

                    # AI Video (Sora 2 / Veo3) - ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô
                    else:
                        # Upload image to imgbb first
                        video_status.info(f"üì§ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1/3: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏õ imgbb...")
                        image_url = kie_gen.upload_image_to_imgbb(
                            img_data['path'],
                            config.IMGBB_API_KEY
                        )
                        video_status.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                        # Create video prompt (motion description)
                        video_prompt = (
                            "A smooth, natural camera movement. "
                            "Subtle product showcase with gentle motion. "
                            "Professional commercial style with slight zoom and pan. "
                            "High quality, cinematic lighting."
                        )

                        # Generate video
                        if video_method == "Veo3":
                            video_status.info(f"üé¨ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2/3: ‡∏™‡πà‡∏á‡πÑ‡∏õ Veo3 AI (‡∏£‡∏≠ 10-30 ‡∏ô‡∏≤‡∏ó‡∏µ)...")
                        else:
                            video_status.info(f"üé¨ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2/3: ‡∏™‡πà‡∏á‡πÑ‡∏õ Sora 2 AI (‡∏£‡∏≠ 3-5 ‡∏ô‡∏≤‡∏ó‡∏µ)...")

                        if video_method == "Veo3":
                            result = video_creator.create_video_from_images(
                                image_urls=[image_url],
                                prompt=video_prompt,
                                filename=f"oneclick_veo3_product{idx + 1}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4",
                                aspect_ratio="9:16",
                                watermark=None
                            )
                        else:  # Sora 2
                            result = video_creator.create_video_from_image(
                                image_url=image_url,
                                prompt=video_prompt,
                                filename=f"oneclick_sora2_product{idx + 1}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4",
                                aspect_ratio="portrait",
                                remove_watermark=True
                            )

                        elapsed = int(time.time() - start_time)
                        video_status.success(f"‚úÖ {video_method} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {elapsed} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
                    video_data = {
                        'path': result['path'],
                        'method': f'{video_method} (One Click)',
                        'task_id': result.get('task_id', ''),
                        'prompt': result.get('prompt', 'N/A'),
                        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        'filename': Path(result['path']).name,
                        'image_used': img_data['path']
                    }
                    st.session_state.generated_videos.append(video_data)

                    videos_created += 1

                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress
                    video_progress.progress((idx + 1) / len(newly_created_images))

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
                    current_status.success(f"""
                    ‚úÖ **‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {idx + 1}/{len(newly_created_images)} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!**
                    - ‡πÑ‡∏ü‡∏•‡πå: `{Path(result['path']).name}`
                    - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {elapsed} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    """)

                    # Show preview of completed video immediately
                    preview_header.success(f"üé¨ **‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {videos_created}/{len(newly_created_images)} ‡∏Ñ‡∏•‡∏¥‡∏õ**")

                    with preview_container:
                        st.subheader(f"üìπ ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {idx + 1}: {Path(result['path']).name}")

                        # Show video player
                        if Path(result['path']).exists():
                            st.video(result['path'])
                            st.caption(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á: {elapsed} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ | üé® ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {Path(img_data['path']).name}")
                        else:
                            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {result['path']}")

                        st.divider()

                    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠
                    if idx + 1 < len(newly_created_images):
                        st.success(f"‚úÖ **‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {idx + 1} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß** - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {idx + 2} ‡∏ï‡πà‡∏≠‡πÑ‡∏õ...")

                except Exception as e:
                    error_msg = str(e)
                    video_status.error(f"‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà {idx + 1}: {error_msg[:150]}")
                    current_status.error(f"‚ùå **‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà {idx + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß**: {error_msg[:100]}")
                    print(f"ERROR creating Sora 2 video {idx + 1}: {error_msg}")

                    # Check if it's the photorealistic people error
                    if 'photorealistic people' in error_msg.lower() or 'contains people' in error_msg.lower():
                        st.warning("üö´ **‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á** - Sora 2 ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á")
                        st.info("üí° ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ - ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ï‡πà‡∏≠")

                    # Continue to next video
                    if idx + 1 < len(newly_created_images):
                        st.info(f"‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {idx + 1} - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {idx + 2} ‡∏ï‡πà‡∏≠‡πÑ‡∏õ...")
                    continue

            video_progress.empty()

            # Update latest video path
            if videos_created > 0:
                st.session_state.video_path = st.session_state.generated_videos[-1]['path']

            # Show success message
            st.balloons()
            st.success("üéâ One Click Generation ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
            st.info(f"""
            üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:**
            - ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {images_created_count} ‡∏†‡∏≤‡∏û
            - ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {videos_created} ‡∏Ñ‡∏•‡∏¥‡∏õ (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏õ Sequential)
            - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£: Sora 2 AI - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
            - ‡∏î‡∏π‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö üéûÔ∏è Video Gallery

            ‚úÖ **‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏õ** - ‡∏£‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≠
            """)
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return

    # Rerun to show results
    st.rerun()


def main():
    """Main application"""

    # Load saved API keys on first run
    if not st.session_state.saved_openai_key and not st.session_state.saved_replicate_token and not st.session_state.saved_gemini_key and not st.session_state.saved_kie_key and not st.session_state.saved_imgbb_key:
        load_saved_api_keys()

    # Title and header
    st.title("üé® AI Product Visualizer")
    st.markdown("### ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤")

    # Sidebar for API key configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")

        # Use saved keys as default value
        default_openai = st.session_state.saved_openai_key or config.OPENAI_API_KEY
        default_replicate = st.session_state.saved_replicate_token or config.REPLICATE_API_TOKEN
        default_gemini = st.session_state.saved_gemini_key or config.GEMINI_API_KEY
        default_kie = st.session_state.saved_kie_key or config.KIE_API_KEY
        default_imgbb = st.session_state.saved_imgbb_key or config.IMGBB_API_KEY

        # Kie.ai API Key input (PRIMARY - No Content Filter!)
        kie_api_key = st.text_input(
            "üöÄ Kie.ai API Key (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î! - Nano Banana + Veo3)",
            value=default_kie,
            type="password",
            help="Kie.ai API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Nano Banana ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û + Veo3 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter!)"
        )

        if kie_api_key:
            os.environ["KIE_API_KEY"] = kie_api_key
            config.KIE_API_KEY = kie_api_key

        # imgbb API Key input (For auto-uploading images)
        imgbb_api_key = st.text_input(
            "üñºÔ∏è imgbb API Key (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)",
            value=default_imgbb,
            type="password",
            help="imgbb API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ü‡∏£‡∏µ! ‡∏Ç‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà https://api.imgbb.com/)"
        )

        if imgbb_api_key:
            os.environ["IMGBB_API_KEY"] = imgbb_api_key
            config.IMGBB_API_KEY = imgbb_api_key

        # Gemini API Key input (For Prompt Generation)
        gemini_api_key = st.text_input(
            "üåü Gemini API Key (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt)",
            value=default_gemini,
            type="password",
            help="Google Gemini API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"
        )

        if gemini_api_key:
            os.environ["GEMINI_API_KEY"] = gemini_api_key
            config.GEMINI_API_KEY = gemini_api_key

        # OpenAI API Key input (Fallback)
        api_key = st.text_input(
            "OpenAI API Key (Fallback - DALL-E)",
            value=default_openai,
            type="password",
            help="(Optional) OpenAI API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DALL-E 3 ‡πÄ‡∏õ‡πá‡∏ô fallback"
        )

        if api_key:
            os.environ["OPENAI_API_KEY"] = api_key
            config.OPENAI_API_KEY = api_key

        # Replicate API Token input
        replicate_token = st.text_input(
            "Replicate API Token (SDXL)",
            value=default_replicate,
            type="password",
            help="Enter your Replicate API token for Stable Diffusion XL"
        )

        if replicate_token:
            os.environ["REPLICATE_API_TOKEN"] = replicate_token
            config.REPLICATE_API_TOKEN = replicate_token


        # Save API Keys button
        col1, col2 = st.columns([2, 1])
        with col1:
            if st.button("üíæ Save API Keys", use_container_width=True):
                if save_api_keys(api_key, replicate_token, gemini_api_key, kie_api_key, imgbb_api_key):
                    st.success("‚úÖ API Keys saved!")
                else:
                    st.error("‚ùå Failed to save API Keys")

        with col2:
            if st.button("üóëÔ∏è Clear", use_container_width=True):
                if save_api_keys("", "", "", "", ""):
                    st.session_state.saved_openai_key = ""
                    st.session_state.saved_replicate_token = ""
                    st.session_state.saved_gemini_key = ""
                    st.session_state.saved_kie_key = ""
                    st.session_state.saved_imgbb_key = ""
                    st.success("‚úÖ Cleared!")
                    st.rerun()

        st.divider()

        # ============ KIE.AI CREDIT DISPLAY (PROMINENT) ============
        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï Kie.ai ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
        if kie_api_key:  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ API key
            try:
                kie_gen_sidebar = KieGenerator()
                credit_info = kie_gen_sidebar.get_credits()

                if credit_info.get('success'):
                    credits = credit_info.get('credits', 0)
                    currency = credit_info.get('currency', 'credits')

                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
                    if credits == 0:
                        st.error(f"### üí≥ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: **{credits:,}**")
                        st.error("‚ö†Ô∏è **‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏°‡∏î!**")
                    elif credits < 50:
                        st.error(f"### üí≥ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: **{credits:,}**")
                        st.error("üö® **‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å!**")
                    elif credits < 200:
                        st.warning(f"### üí≥ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: **{credits:,}**")
                        st.warning("‚ö†Ô∏è **‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢**")
                    else:
                        st.success(f"### üí≥ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: **{credits:,}**")

                    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                    st.link_button(
                        "üí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï Kie.ai",
                        "https://kie.ai/billing",
                        use_container_width=True
                    )
                else:
                    st.info("üí≥ **‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï**: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ")

            except Exception as e:
                # Silent fail ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ
                st.info(f"üí≥ **‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï**: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ")

            st.divider()
        # ============ END CREDIT DISPLAY ============

        # Statistics
        st.header("üìä Statistics")
        col_stat1, col_stat2 = st.columns(2)
        with col_stat1:
            st.metric("‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", len(st.session_state.generated_images))
        with col_stat2:
            st.metric("‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà", len(st.session_state.gallery_images))
        st.metric("Videos Created", 1 if st.session_state.video_path else 0)

        st.divider()

        # Export logs section
        st.header("üì• Export Data")
        if st.button("Export Logs to CSV", use_container_width=True):
            export_logs_to_csv()

    # Main content area
    tabs = st.tabs(["üì§ Upload & Generate", "üé¨ Create Video", "üîÑ Auto Loop", "üì∑ Gallery", "üéûÔ∏è Video Gallery"])

    # Tab 1: Upload & Generate
    with tabs[0]:
        upload_and_generate_tab()

    # Tab 2: Create Video
    with tabs[1]:
        create_video_tab()

    # Tab 3: Auto Loop (NEW!)
    with tabs[2]:
        from automation_loop import create_automation_tab
        create_automation_tab()

    # Tab 4: Gallery
    with tabs[3]:
        gallery_tab()

    # Tab 5: Video Gallery
    with tabs[4]:
        video_gallery_tab()


def upload_and_generate_tab():
    """Upload images and generate new visualizations"""

    st.header("1Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    uploaded_files = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (PNG, JPG)",
        type=['png', 'jpg', 'jpeg'],
        accept_multiple_files=True,
        key="product_images_uploader",
        help="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á ‚Üí ‡πÉ‡∏ä‡πâ Hybrid (Gemini ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå + SDXL ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û) | ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‚Üí ‡πÉ‡∏ä‡πâ DALL-E (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£)"
    )

    # AI Engine selection (manual)
    has_uploaded = uploaded_files is not None and len(uploaded_files) > 0
    has_saved = len(st.session_state.uploaded_reference_images) > 0
    has_batch_products = 'batch_products' in st.session_state and len(st.session_state.batch_products) > 0

    # Show dropdown to select AI engine
    if has_uploaded or has_saved or has_batch_products:
        # User uploaded images - show options that use reference images
        engine_options = [
            "Kie.ai Nano Banana (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î! ‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter)",
            "SDXL + ControlNet (‡∏ï‡∏£‡∏á‡∏õ‡∏Å 100%)",
            "Stable Diffusion XL (‡πÄ‡∏õ‡πä‡∏∞‡∏Å‡∏ß‡πà‡∏≤)",
            "Gemini + SDXL Hybrid (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û)",
            "Gemini Pro Vision (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)"
        ]
        default_index = 0  # Default to Kie.ai Nano Banana
    else:
        # No images uploaded
        engine_options = [
            "Gemini Imagen (‡πÉ‡∏ä‡πâ AI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)",
            "DALL¬∑E 3 (Fallback)"
        ]
        default_index = 0

    ai_engine = st.selectbox(
        "ü§ñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å AI Engine",
        options=engine_options,
        index=default_index,
        help="SDXL = ‡πÄ‡∏£‡πá‡∏ß ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á | Hybrid = ‡∏ä‡πâ‡∏≤ ‡πÅ‡∏ï‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô"
    )

    st.session_state.ai_engine = ai_engine

    # DEBUG: Show upload status
    st.info(f"""
    üìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:**
    - uploaded_files: {len(uploaded_files) if uploaded_files else 0} ‡πÑ‡∏ü‡∏•‡πå
    - saved in session: {len(st.session_state.uploaded_reference_images)} ‡πÑ‡∏ü‡∏•‡πå
    - batch_products: {len(st.session_state.batch_products) if has_batch_products else 0} ‡πÑ‡∏ü‡∏•‡πå
    - AI Engine: {ai_engine}
    """)

    # Show selected engine
    if ai_engine == "Kie.ai Nano Banana (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î! ‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter)":
        st.success("üöÄ **‡πÇ‡∏´‡∏°‡∏î: Kie.ai Nano Banana** - ‡∏¢‡∏∂‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 100% + ‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î!)")
    elif ai_engine == "Gemini Imagen (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÉ‡∏ä‡πâ AI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)":
        st.success("üåü **‡πÇ‡∏´‡∏°‡∏î: Gemini Imagen** - ‡πÉ‡∏ä‡πâ Gemini ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt + Imagen ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ")
    elif ai_engine == "Gemini + SDXL Hybrid (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û)":
        st.success("üîÆ **‡πÇ‡∏´‡∏°‡∏î: Hybrid** - ‡πÉ‡∏ä‡πâ Gemini ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå + SDXL ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û")
    elif ai_engine == "Gemini Pro Vision (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)":
        st.success("üîÆ **‡πÇ‡∏´‡∏°‡∏î: Gemini Vision** - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
    elif ai_engine == "Stable Diffusion XL (‡πÄ‡∏õ‡πä‡∏∞‡∏Å‡∏ß‡πà‡∏≤)":
        st.success("‚úÖ **‡πÇ‡∏´‡∏°‡∏î: SDXL** - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏°‡∏≤‡∏Å")
    elif ai_engine == "SDXL + ControlNet (‡∏ï‡∏£‡∏á‡∏õ‡∏Å 100%)":
        st.success("üéØ **‡πÇ‡∏´‡∏°‡∏î: SDXL + ControlNet** - ‡∏¢‡∏∂‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 100%")
    else:
        st.info("üí° **‡πÇ‡∏´‡∏°‡∏î: DALL-E** - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å prompt (Fallback)")

    if uploaded_files:
        st.success(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå")

        # DEBUG: Show current state
        st.warning(f"""
        üîç DEBUG ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:
        - ai_engine: `{ai_engine}`
        - uploaded_files: {len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå
        - uploaded_reference_images ‡πÉ‡∏ô session: {len(st.session_state.uploaded_reference_images)} ‡πÑ‡∏ü‡∏•‡πå
        - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {st.session_state.uploaded_reference_images}
        """)

        # Save uploaded files to temp directory - ALWAYS SAVE FOR HYBRID MODE
        # Don't use complex logic, just save directly
        st.session_state.uploaded_reference_images = []
        st.session_state.uploaded_filenames = [f.name for f in uploaded_files]

        for uploaded_file in uploaded_files:
            image = Image.open(uploaded_file)
            # Save to temp file for all modes that need reference images
            if ai_engine != "DALL¬∑E 3 (‡∏õ‡∏Å‡∏ï‡∏¥)":
                temp_path = config.IMAGES_DIR / f"temp_ref_{uploaded_file.name}"
                image.save(temp_path)
                st.session_state.uploaded_reference_images.append(str(temp_path))
                st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {temp_path}")

        # DEBUG: Show after save
        st.warning(f"""
        üîç DEBUG ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:
        - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: {len(st.session_state.uploaded_reference_images)} ‡πÑ‡∏ü‡∏•‡πå
        - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {st.session_state.uploaded_reference_images}
        """)

        # Display uploaded images
        cols = st.columns(min(len(uploaded_files), 4))
        for idx, uploaded_file in enumerate(uploaded_files):
            with cols[idx % 4]:
                image = Image.open(uploaded_file)
                # Create thumbnail copy for preview
                img_preview = image.copy()
                img_preview.thumbnail((400, 400))
                st.image(img_preview, width=400, caption=f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {uploaded_file.name}")

        # DEBUG: Show saved images count
        st.info(f"üîç DEBUG: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß {len(st.session_state.uploaded_reference_images)} ‡πÑ‡∏ü‡∏•‡πå | ‡πÇ‡∏´‡∏°‡∏î: {ai_engine}")

    st.divider()

    # ========== BATCH UPLOAD SECTION ==========
    st.header("üì¶ Batch Upload & Auto-Generate")
    st.info("""
    üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Batch Mode:**
    1. ‡∏ß‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `upload_images`
    2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"
    3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Style/Location/Camera Angle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    4. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" ‚Üí ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!
    """)

    col_batch1, col_batch2 = st.columns([2, 1])

    with col_batch1:
        if st.button("üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå upload_images", use_container_width=True):
            batch_load_products_from_folder()

    with col_batch2:
        # Open upload_images folder button
        if st.button("üìÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå upload_images", use_container_width=True):
            import subprocess
            import os
            folder_path = os.path.abspath("upload_images")
            try:
                subprocess.Popen(f'explorer "{folder_path}"')
                st.success("‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß!")
            except Exception as e:
                st.error(f"Error: {e}")

    # ========== ONE CLICK BUTTON ==========
    st.divider()

    num_uploaded_images = len(st.session_state.uploaded_reference_images)

    if num_uploaded_images > 0:
        st.success(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {num_uploaded_images} ‡πÑ‡∏ü‡∏•‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á!")

    st.info("üí° **One Click:** ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ (‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏™‡πÑ‡∏ï‡∏•‡πå) ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ")

    # ONE CLICK Settings
    st.subheader("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ONE CLICK")

    col_oc1, col_oc2, col_oc3 = st.columns(3)

    with col_oc1:
        oneclick_product_category = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            options=config.PRODUCT_CATEGORIES,
            key="oneclick_product_category_select"
        )
        st.session_state.oneclick_product_category = oneclick_product_category

    with col_oc2:
        oneclick_gender = st.selectbox(
            "‡πÄ‡∏û‡∏®",
            options=config.GENDER_OPTIONS,
            key="oneclick_gender_select"
        )
        st.session_state.oneclick_gender = oneclick_gender

    with col_oc3:
        oneclick_age_range = st.selectbox(
            "‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏",
            options=config.AGE_RANGES,
            key="oneclick_age_range_select"
        )
        st.session_state.oneclick_age_range = oneclick_age_range

    col_oc4, col_oc5 = st.columns(2)

    with col_oc4:
        images_per_product = st.number_input(
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà)",
            min_value=1,
            max_value=10,
            value=3,
            help="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏µ‡πà‡∏£‡∏π‡∏õ‡∏ï‡πà‡∏≠ 1 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)"
        )

    with col_oc5:
        video_method = st.selectbox(
            "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            options=["Quick Video (MoviePy)", "Sora 2", "Veo3"],
            help=(
                "Quick Video = ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ AI, slideshow)\n"
                "Sora 2 = ‡πÄ‡∏£‡πá‡∏ß 3-5 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏Ñ‡∏•‡∏¥‡∏õ (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô)\n"
                "Veo3 = ‡∏ä‡πâ‡∏≤ 10-30 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏Ñ‡∏•‡∏¥‡∏õ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)"
            )
        )

    # Show performance warning for Veo3
    if video_method == "Veo3":
        st.warning(
            "‚ö†Ô∏è **Veo3 ‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å!**\n\n"
            "- ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ **10-30 ‡∏ô‡∏≤‡∏ó‡∏µ** ‡∏ï‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n"
            "- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ **Quick Video** (‡∏ó‡∏±‡∏ô‡∏ó‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠ **Sora 2** (3-5 ‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÅ‡∏ó‡∏ô"
        )
    elif video_method == "Quick Video (MoviePy)":
        st.success(
            "‚ö° **Quick Video - ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!**\n\n"
            "- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ AI)\n"
            "- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slideshow ‡∏û‡∏£‡πâ‡∏≠‡∏° transition\n"
            "- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"
        )

    total_outputs = num_uploaded_images * images_per_product

    # Calculate estimated time based on method
    if video_method == "Veo3":
        min_time_per_video = 10  # Veo3 takes 10-30 minutes
        max_time_per_video = 30
        time_str = f"{total_outputs * min_time_per_video}-{total_outputs * max_time_per_video} ‡∏ô‡∏≤‡∏ó‡∏µ"
    elif video_method == "Sora 2":
        min_time_per_video = 3   # Sora 2 takes 3-5 minutes
        max_time_per_video = 5
        time_str = f"{total_outputs * min_time_per_video}-{total_outputs * max_time_per_video} ‡∏ô‡∏≤‡∏ó‡∏µ"
    else:  # Quick Video
        time_str = "‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"

    st.info(f"üìä ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: **{total_outputs} ‡∏£‡∏π‡∏õ** + **{total_outputs} ‡∏Ñ‡∏•‡∏¥‡∏õ** (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {time_str})")

    if st.button("‚ö° ONE CLICK - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", type="primary", use_container_width=True, key="oneclick_btn"):
        one_click_generation(images_per_product=images_per_product, video_method=video_method)

    st.divider()

    # Show loaded products
    if 'batch_products' in st.session_state and len(st.session_state.batch_products) > 0:
        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß {len(st.session_state.batch_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        # Display loaded products in grid
        st.subheader("üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á")
        batch_cols = st.columns(min(len(st.session_state.batch_products), 5))
        for idx, product_path in enumerate(st.session_state.batch_products[:5]):
            with batch_cols[idx]:
                try:
                    img = Image.open(product_path)
                    img_preview = img.copy()
                    img_preview.thumbnail((200, 200))
                    st.image(img_preview, caption=Path(product_path).name, use_column_width=True)
                except Exception as e:
                    st.error(f"Error: {e}")

        if len(st.session_state.batch_products) > 5:
            st.caption(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(st.session_state.batch_products) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        st.divider()

    # Form for product information (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á Single ‡πÅ‡∏•‡∏∞ Batch Mode)
    st.header("2Ô∏è‚É£ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û")

    col1, col2, col3 = st.columns(3)

    with col1:
        product_category = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            options=config.PRODUCT_CATEGORIES,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
        )

    with col2:
        gender = st.selectbox(
            "‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö/‡∏ô‡∏≤‡∏á‡πÅ‡∏ö‡∏ö",
            options=config.GENDER_OPTIONS,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö/‡∏ô‡∏≤‡∏á‡πÅ‡∏ö‡∏ö"
        )

    with col3:
        age_range = st.selectbox(
            "‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏",
            options=config.AGE_RANGES,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö/‡∏ô‡∏≤‡∏á‡πÅ‡∏ö‡∏ö"
        )

    st.divider()

    # Photo style settings
    st.subheader("üì∏ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á")

    col_style1, col_style2, col_style3 = st.columns(3)

    with col_style1:
        photo_style = st.selectbox(
            "‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏†‡∏≤‡∏û",
            options=config.PHOTO_STYLES,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û"
        )

    with col_style2:
        location = st.selectbox(
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á",
            options=config.LOCATIONS,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û"
        )

    with col_style3:
        camera_angle = st.selectbox(
            "‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á",
            options=config.CAMERA_ANGLES,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: Waist Down ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤/‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á)"
        )

    # Additional details
    custom_details = st.text_area(
        "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (Optional)",
        placeholder="‡πÄ‡∏ä‡πà‡∏ô urban background, luxury setting, outdoor scene, etc.",
        help="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö prompt"
    )

    st.divider()

    # Generate Prompt button
    st.header("3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt")

    col_btn1, col_btn2 = st.columns([3, 1])

    with col_btn1:
        if st.button("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt", type="secondary", use_container_width=True):
            # Generate prompt based on selected AI engine
            prompt_gen = PromptGenerator()

            # Use V2 (No Face, Product Focus) for image generation
            generated_prompt = prompt_gen.generate_image_prompt_v2(
                product_category=product_category,
                gender=gender,
                age_range=age_range,
                photo_style=photo_style,
                location=location,
                camera_angle=camera_angle,
                custom_details=custom_details
            )

            st.session_state.current_prompt = generated_prompt
            st.session_state.prompt_generated = True
            st.rerun()

    with col_btn2:
        if st.button("üîÑ Clear", use_container_width=True):
            st.session_state.current_prompt = ""
            st.session_state.prompt_generated = False
            st.rerun()

    # Display and edit prompt
    if st.session_state.prompt_generated or st.session_state.current_prompt:
        st.subheader("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Prompt")
        edited_prompt = st.text_area(
            "Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)",
            value=st.session_state.current_prompt,
            height=150,
            key="prompt_editor",
            help="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç prompt ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û"
        )
        # Update session state with edited prompt
        st.session_state.current_prompt = edited_prompt

        # Show character count
        st.caption(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß Prompt: {len(edited_prompt)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")

        st.divider()

        # Generate image button
        st.header("4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û")

        # Show different limits based on engine
        if st.session_state.ai_engine == "Stable Diffusion XL (‡πÄ‡∏õ‡πä‡∏∞‡∏Å‡∏ß‡πà‡∏≤)":
            max_images = 4
            default_images = 2
            help_text = "SDXL ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 2-4 ‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ DALL-E)"
        else:
            max_images = 5
            default_images = 1
            help_text = "DALL-E ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á 1-5 ‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

        # Multi-generation mode for better quality
        col_num1, col_num2 = st.columns([2, 1])
        with col_num1:
            num_images = st.selectbox(
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)",
                options=[1, 2, 3, 4],
                index=0,
                help="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 2-3 ‡∏†‡∏≤‡∏û)"
            )
        with col_num2:
            if num_images > 1:
                st.info(f"üí° ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á {num_images} ‡∏†‡∏≤‡∏û")

        # Advanced settings (optional)
        with st.expander("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (Optional)"):
            col_a, col_b = st.columns(2)
            with col_a:
                use_seed = st.checkbox("‡∏•‡πá‡∏≠‡∏Å Seed (‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ)", value=False)
                if use_seed:
                    seed_value = st.number_input("Seed", min_value=0, max_value=999999, value=42)
                else:
                    seed_value = None
            with col_b:
                prompt_strength = st.slider(
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á Reference (‡∏ï‡πà‡∏≥ = ‡∏¢‡∏∂‡∏î‡∏£‡∏π‡∏õ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏°‡∏≤‡∏Å)",
                    min_value=0.15,
                    max_value=0.3,
                    value=0.20,
                    step=0.01,
                    help="0.15-0.25 = ‡∏¢‡∏∂‡∏î reference ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 0.20)"
                )

            st.caption("üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö ‡∏•‡∏î Prompt Strength ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0.15-0.18")

        if st.button("üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Prompt", type="primary", use_container_width=True):
            # DEBUG: Show validation info
            st.write("---")
            st.write(f"üîç DEBUG - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°:")
            st.write(f"- AI Engine: `{st.session_state.ai_engine}`")
            st.write(f"- GEMINI_API_KEY: {'‚úÖ ‡∏°‡∏µ' if config.GEMINI_API_KEY else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
            st.write(f"- REPLICATE_API_TOKEN: {'‚úÖ ‡∏°‡∏µ' if config.REPLICATE_API_TOKEN else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
            st.write(f"- uploaded_reference_images: {len(st.session_state.uploaded_reference_images)} ‡πÑ‡∏ü‡∏•‡πå")
            st.write(f"- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå: {st.session_state.uploaded_reference_images}")
            st.write("---")

            # Validate based on AI engine
            if st.session_state.ai_engine == "Kie.ai Nano Banana (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î! ‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter)":
                if not config.KIE_API_KEY:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Kie.ai API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
                    return
                if not config.IMGBB_API_KEY:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å imgbb API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
                    st.info("üí° ‡∏Ç‡∏≠ API Key ‡∏ü‡∏£‡∏µ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: https://api.imgbb.com/")
                    return
                if not config.GEMINI_API_KEY:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Gemini API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á prompt)")
                    return
                if not st.session_state.uploaded_reference_images:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Kie.ai Mode")
                    return

            elif st.session_state.ai_engine == "Gemini Imagen (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÉ‡∏ä‡πâ AI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)":
                if not config.GEMINI_API_KEY:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Gemini API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
                    return

            elif st.session_state.ai_engine == "Gemini + SDXL Hybrid (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û)":
                if not config.GEMINI_API_KEY:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Gemini API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
                    return
                if not config.REPLICATE_API_TOKEN:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Replicate API Token ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
                    return
                if not st.session_state.uploaded_reference_images:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hybrid Mode")
                    st.error(f"üêõ DEBUG: len(uploaded_reference_images) = {len(st.session_state.uploaded_reference_images)}")
                    return
                    
            elif st.session_state.ai_engine == "Gemini Pro Vision (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)":
                if not config.GEMINI_API_KEY:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Gemini API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
                    return
                if not st.session_state.uploaded_reference_images:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini Vision Mode")
                    return
                    
            elif st.session_state.ai_engine == "Stable Diffusion XL (‡πÄ‡∏õ‡πä‡∏∞‡∏Å‡∏ß‡πà‡∏≤)":
                if not config.REPLICATE_API_TOKEN:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Replicate API Token ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
                    return

                if not st.session_state.uploaded_reference_images:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SDXL Mode")
                    return
            else:
                if not config.OPENAI_API_KEY:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OpenAI API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
                    return

            if not st.session_state.current_prompt.strip():
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏Å‡πà‡∏≠‡∏ô")
                return

            # DEBUG: Show prompt being sent
            with st.expander("üîç DEBUG: Prompt ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ AI"):
                st.code(st.session_state.current_prompt, language="text")
                st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {len(st.session_state.current_prompt)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
                st.caption(f"AI Engine: {st.session_state.ai_engine}")

            # Get advanced settings
            advanced_params = {
                'seed': seed_value if use_seed else None,
                'prompt_strength': prompt_strength if st.session_state.ai_engine == "Stable Diffusion XL (‡πÄ‡∏õ‡πä‡∏∞‡∏Å‡∏ß‡πà‡∏≤)" else None
            }

            generate_images_from_prompt(
                st.session_state.current_prompt,
                product_category,
                gender,
                age_range,
                num_images,
                ai_engine=st.session_state.ai_engine,
                advanced_params=advanced_params,
                photo_style=photo_style,
                location=location,
                camera_angle=camera_angle
            )

        # ========== BATCH GENERATION SECTION (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß) ==========
        if 'batch_products' in st.session_state and len(st.session_state.batch_products) > 0:
            st.divider()
            st.header("üöÄ Batch Auto-Generate")
            st.info(f"üì¶ ‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ {len(st.session_state.batch_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö Auto!")

            col_batch1, col_batch2 = st.columns([2, 1])

            with col_batch1:
                num_images_per_product = st.selectbox(
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Batch Mode)",
                    options=[1, 2, 3, 4],
                    index=0,
                    help="‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏µ‡πà‡∏†‡∏≤‡∏û"
                )

            with col_batch2:
                st.metric("‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(st.session_state.batch_products) * num_images_per_product)

            if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", type="primary", use_container_width=True):
                batch_generate_all_products(
                    product_category=product_category,
                    gender=gender,
                    age_range=age_range,
                    photo_style=photo_style,
                    location=location,
                    camera_angle=camera_angle,
                    custom_details=custom_details,
                    num_images_per_product=num_images_per_product,
                    ai_engine=st.session_state.ai_engine
                )


def generate_images_from_prompt(prompt, product_category, gender, age_range, num_images, ai_engine="DALL¬∑E 3 (‡∏õ‡∏Å‡∏ï‡∏¥)", advanced_params=None, photo_style=None, location=None, camera_angle=None, skip_display=False):
    """Generate images using selected AI engine from given prompt

    Args:
        skip_display: If True, skip displaying images (used in batch processing)
    """

    # Initialize generators
    _, dalle_gen, _ = initialize_generators()

    if not dalle_gen:
        st.error("Failed to initialize generator. Please check your API key.")
        return

    # Generate images
    progress_bar = st.progress(0)
    status_text = st.empty()

    print(f"Starting loop: Will generate {num_images} image(s)")

    for i in range(num_images):
        try:
            print(f"Loop iteration {i+1}/{num_images}")

            if ai_engine == "Kie.ai Nano Banana (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î! ‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter)":
                status_text.text(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Kie.ai Nano Banana ‡∏ó‡∏µ‡πà {i+1} ‡∏à‡∏≤‡∏Å {num_images}...")

                # Get reference image
                ref_image = st.session_state.uploaded_reference_images[i % len(st.session_state.uploaded_reference_images)]
                print(f"Using reference image: {ref_image}")

                # DEBUG: Print prompt to console
                print("="*80)
                print("[DEBUG] KIE.AI NANO BANANA Generation")
                print("="*80)
                print(prompt)
                print("="*80)

                # Initialize Kie.ai generator
                kie_gen = KieGenerator()

                # Extract English name from product_category for ASCII-safe filename
                english_name = product_category.split('(')[1].split(')')[0].strip().lower().replace(' ', '_')

                # Auto-upload and generate image with Kie.ai Nano Banana
                # Images will be automatically uploaded to imgbb
                status_text.text(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")

                result = kie_gen.generate_image(
                    prompt=prompt,
                    reference_image_paths=[ref_image],  # Local path - will auto-upload
                    filename_prefix=f"kie_{english_name}",
                    image_size="9:16",
                    imgbb_api_key=config.IMGBB_API_KEY
                )

                print(f"Kie.ai generation {i+1} completed successfully")

                # Store in session state
                image_data = {
                    'path': result['path'],
                    'url': result['url'],
                    'prompt': prompt,
                    'revised_prompt': prompt,
                    'product_category': product_category,
                    'gender': gender,
                    'age_range': age_range,
                    'photo_style': photo_style,
                    'location': location,
                    'camera_angle': camera_angle,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'ai_engine': 'Kie.ai Nano Banana',
                    'task_id': result.get('task_id', '')
                }

            elif ai_engine == "Gemini Imagen (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÉ‡∏ä‡πâ AI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)":
                status_text.text(f"üåü ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gemini Imagen ‡∏ó‡∏µ‡πà {i+1} ‡∏à‡∏≤‡∏Å {num_images}...")

                print("="*80)
                print("[DEBUG] GEMINI IMAGEN Generation")
                print("="*80)
                print(prompt)
                print("="*80)

                # Generate with Gemini Imagen
                english_name = product_category.split('(')[1].split(')')[0].strip().lower().replace(' ', '_')

                result = dalle_gen.generate_image(
                    prompt=prompt,
                    filename_prefix=f"imagen_{english_name}"
                )

                print(f"Gemini Imagen generation {i+1} completed successfully")

                # Store in session state
                image_data = {
                    'path': result['path'],
                    'url': result.get('url', ''),
                    'prompt': prompt,
                    'revised_prompt': result.get('revised_prompt', prompt),
                    'product_category': product_category,
                    'gender': gender,
                    'age_range': age_range,
                    'photo_style': photo_style,
                    'location': location,
                    'camera_angle': camera_angle,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'ai_engine': 'Gemini Imagen'
                }

            elif ai_engine == "Gemini + SDXL Hybrid (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û)":
                status_text.text(f"üîÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ SDXL ‡∏ó‡∏µ‡πà {i+1} ‡∏à‡∏≤‡∏Å {num_images}...")

                # Get reference image
                ref_image = st.session_state.uploaded_reference_images[i % len(st.session_state.uploaded_reference_images)]
                print(f"Using reference image: {ref_image}")

                # DEBUG: Print prompt to console
                print("="*80)
                print("[DEBUG] HYBRID: Gemini Analysis + SDXL Generation")
                print("="*80)
                print(prompt)
                print("="*80)

                # Generate image with Hybrid approach
                # Extract English name from product_category for ASCII-safe filename
                english_name = product_category.split('(')[1].split(')')[0].strip().lower().replace(' ', '_')

                result = dalle_gen.generate_with_gemini_analysis_then_sdxl(
                    prompt=prompt,
                    reference_image_path=ref_image,
                    filename_prefix=f"hybrid_{english_name}"
                )

                print(f"Hybrid generation {i+1} completed successfully")

                # Store in session state
                image_data = {
                    'path': result['path'],
                    'url': result['url'],
                    'prompt': result.get('prompt', prompt),
                    'revised_prompt': result.get('prompt', prompt),
                    'product_category': product_category,
                    'gender': gender,
                    'age_range': age_range,
                    'photo_style': photo_style,
                    'location': location,
                    'camera_angle': camera_angle,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'ai_engine': 'Gemini + SDXL Hybrid',
                    'analysis': result.get('analysis', ''),
                    'analysis_file': result.get('analysis_file', '')
                }

            elif ai_engine == "Gemini Pro Vision (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)":
                status_text.text(f"üîÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini Vision ‡∏ó‡∏µ‡πà {i+1} ‡∏à‡∏≤‡∏Å {num_images}...")

                # Get reference image
                ref_image = st.session_state.uploaded_reference_images[i % len(st.session_state.uploaded_reference_images)]
                print(f"Using reference image: {ref_image}")

                # DEBUG: Print prompt to console
                print("="*80)
                print("[DEBUG] GEMINI VISION ANALYSIS")
                print("="*80)
                print(prompt)
                print("="*80)

                # Generate analysis with Gemini Pro Vision
                # Extract English name from product_category for ASCII-safe filename
                english_name = product_category.split('(')[1].split(')')[0].strip().lower().replace(' ', '_')

                result = dalle_gen.generate_with_gemini_vision(
                    prompt=prompt,
                    reference_image_path=ref_image,
                    filename_prefix=f"gemini_{english_name}"
                )

                print(f"Analysis {i+1} completed successfully")

                # Store in session state
                image_data = {
                    'path': result['path'],
                    'url': result['url'],
                    'prompt': prompt,
                    'revised_prompt': prompt,  # Gemini Vision doesn't revise prompt
                    'product_category': product_category,
                    'gender': gender,
                    'age_range': age_range,
                    'photo_style': photo_style,
                    'location': location,
                    'camera_angle': camera_angle,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'ai_engine': 'Gemini Vision Analysis',
                    'analysis': result.get('analysis', ''),
                    'analysis_file': result.get('analysis_file', '')
                }

            elif ai_engine == "Stable Diffusion XL (‡πÄ‡∏õ‡πä‡∏∞‡∏Å‡∏ß‡πà‡∏≤)":
                status_text.text(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ SDXL ‡∏ó‡∏µ‡πà {i+1} ‡∏à‡∏≤‡∏Å {num_images}...")

                # Get reference image
                ref_image = st.session_state.uploaded_reference_images[i % len(st.session_state.uploaded_reference_images)]
                print(f"Using reference image: {ref_image}")

                # DEBUG: Print prompt to console
                print("="*80)
                print("[DEBUG] PROMPT ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ SDXL")
                print("="*80)
                print(prompt)
                print("="*80)

                # Generate image with SDXL Smart (Simple img2img)
                # Extract English name from product_category for ASCII-safe filename
                english_name = product_category.split('(')[1].split(')')[0].strip().lower().replace(' ', '_')

                # Pass advanced params if available
                seed = advanced_params.get('seed') if advanced_params else None
                prompt_str = advanced_params.get('prompt_strength', 0.20) if advanced_params else 0.20

                # For multi-generation: use different seeds for variety
                actual_seed = seed if seed is not None else (42 + i * 123)

                result = dalle_gen.generate_with_sdxl_simple(
                    prompt=prompt,
                    reference_image_path=ref_image,
                    filename_prefix=f"sdxl_{english_name}",
                    seed=actual_seed,
                    prompt_strength=prompt_str
                )

                print(f"Image {i+1} generated successfully")

                # Store in session state
                image_data = {
                    'path': result['path'],
                    'url': result['url'],
                    'prompt': prompt,
                    'revised_prompt': prompt,  # SDXL doesn't revise prompt
                    'product_category': product_category,
                    'gender': gender,
                    'age_range': age_range,
                    'photo_style': photo_style,
                    'location': location,
                    'camera_angle': camera_angle,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'ai_engine': 'SDXL'
                }

            else:
                status_text.text(f"üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ DALL-E ‡∏ó‡∏µ‡πà {i+1} ‡∏à‡∏≤‡∏Å {num_images}...")

                # Generate image with DALL-E
                result = dalle_gen.generate_image(
                    prompt=prompt,
                    filename_prefix=f"dalle_{product_category.split('(')[0].strip()}"
                )

                # Store in session state
                image_data = {
                    'path': result['path'],
                    'url': result['url'],
                    'prompt': prompt,
                    'revised_prompt': result.get('revised_prompt', prompt),
                    'product_category': product_category,
                    'gender': gender,
                    'age_range': age_range,
                    'photo_style': photo_style,
                    'location': location,
                    'camera_angle': camera_angle,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'ai_engine': 'DALL-E'
                }

            st.session_state.generated_images.append(image_data)
            st.session_state.prompts_data.append(image_data)

            progress_bar.progress((i + 1) / num_images)

        except Exception as e:
            error_msg = str(e)

            # Check if it's a content filter error
            if "content_policy_violation" in error_msg or "content filter" in error_msg.lower():
                st.error(f"‚ùå ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà {i+1}: ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡∏≠‡∏Å‡πÇ‡∏î‡∏¢ Content Filter ‡∏Ç‡∏≠‡∏á OpenAI")
                st.warning(
                    "üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏•‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Prompt ‡πÇ‡∏î‡∏¢:\n"
                    "- ‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô\n"
                    "- ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô\n"
                    "- ‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏ß‡∏°‡πÉ‡∏™‡πà\n"
                    "- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
                )
            else:
                st.error(f"Error generating image {i+1}: {error_msg}")

    status_text.text("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    progress_bar.empty()
    status_text.empty()

    if not skip_display:
        st.success(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {num_images} ‡∏†‡∏≤‡∏û!")
        # Display newly generated images
        display_generated_images()
        # Show latest images gallery
        show_latest_images_gallery()


def show_latest_images_gallery(n=20):
    """Show latest generated images from folder"""
    from pathlib import Path
    import os
    import subprocess

    st.subheader("üì∏ ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

    # Get latest images from folder
    images_path = Path("results/images")
    if not images_path.exists():
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")
        return

    # Get latest n images (exclude temp files)
    all_image_files = sorted(
        [p for p in images_path.glob("*.png") if not p.name.startswith("temp_")],
        key=lambda p: p.stat().st_mtime,
        reverse=True
    )

    if not all_image_files:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á")
        return

    total_in_folder = len(all_image_files)
    image_files = all_image_files[:n]

    # Info and button
    col_info, col_btn = st.columns([2, 1])
    with col_info:
        st.info(f"üìä **‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_in_folder} ‡∏†‡∏≤‡∏û** | ‡πÅ‡∏™‡∏î‡∏á {len(image_files)} ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    with col_btn:
        import time
        gallery_btn_key = f"open_gallery_folder_{int(time.time() * 1000)}"
        if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏û", key=gallery_btn_key):
            folder_path = os.path.abspath("results/images")
            try:
                subprocess.Popen(f'explorer "{folder_path}"')
                st.success("‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß!")
            except Exception as e:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {e}")

    # Display in grid (4 columns for better view)
    cols_per_row = 4
    for i in range(0, len(image_files), cols_per_row):
        cols = st.columns(cols_per_row)
        for j in range(cols_per_row):
            idx = i + j
            if idx < len(image_files):
                img_path = image_files[idx]
                with cols[j]:
                    try:
                        st.image(str(img_path), caption=img_path.name, use_column_width=True)
                    except Exception as e:
                        st.error(f"Error: {e}")


def display_generated_images():
    """Display generated images with controls"""

    if not st.session_state.generated_images:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á")
        return

    # Number of recent images to show
    RECENT_LIMIT = 5

    # Auto-archive old images if more than RECENT_LIMIT
    if len(st.session_state.generated_images) > RECENT_LIMIT:
        images_to_archive = st.session_state.generated_images[:-RECENT_LIMIT]
        st.session_state.gallery_images.extend(images_to_archive)
        st.session_state.generated_images = st.session_state.generated_images[-RECENT_LIMIT:]
        # Don't show message, just archive silently

    total_images = len(st.session_state.generated_images)
    gallery_count = len(st.session_state.gallery_images)

    st.subheader(f"üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

    # Info and buttons row
    col_info, col_folder = st.columns([3, 1])

    with col_info:
        st.info(f"üìä **‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:** {total_images} ‡∏†‡∏≤‡∏û | **‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà:** {gallery_count} ‡∏†‡∏≤‡∏û")

    with col_folder:
        import subprocess
        import os
        import time
        folder_key = f"open_all_images_folder_{int(time.time() * 1000)}"
        if st.button("üìÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå", key=folder_key):
            folder_path = os.path.abspath("results/images")
            try:
                subprocess.Popen(f'explorer "{folder_path}"')
                st.success("‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß!")
            except Exception as e:
                st.error(f"Error: {e}")

    # Show recent images
    recent_images = st.session_state.generated_images
    st.caption(f"‡πÅ‡∏™‡∏î‡∏á {len(recent_images)} ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö üì∑ Gallery)")

    # Show latest image only
    img_data = recent_images[-1]
    idx = 0  # Always 0 for latest image

    with st.container():
        col1, col2 = st.columns([1, 2])

        with col1:
            # Display image
            try:
                image = Image.open(img_data['path'])
                st.image(image, use_column_width=True)
            except Exception as e:
                st.error(f"Error loading image: {e}")

        with col2:
            # Display info
            st.markdown(f"**Product:** {img_data['product_category']}")
            st.markdown(f"**Gender:** {img_data['gender']}")
            st.markdown(f"**Age Range:** {img_data['age_range']}")
            st.markdown(f"**Created:** {img_data['timestamp']}")

            # Show prompt
            with st.expander("View Prompt"):
                st.text(img_data['prompt'])

            # Action buttons
            col_a, col_b = st.columns(2)

            with col_a:
                if st.button(f"üîÑ Re-generate", key=f"regen_{idx}"):
                    regenerate_image(img_data)

            with col_b:
                if st.button(f"‚úèÔ∏è Edit Prompt", key=f"edit_{idx}"):
                    st.session_state[f'editing_{idx}'] = True

            # Edit prompt section
            if st.session_state.get(f'editing_{idx}', False):
                new_prompt = st.text_area(
                    "Edit Prompt",
                    value=img_data['prompt'],
                    key=f"prompt_edit_{idx}"
                )
                if st.button("Generate with New Prompt", key=f"gen_new_{idx}"):
                    generate_from_edited_prompt(new_prompt, img_data)
                    st.session_state[f'editing_{idx}'] = False
                    st.rerun()

            st.divider()


def regenerate_image(img_data):
    """Regenerate an image with the same prompt"""

    _, dalle_gen, _ = initialize_generators()

    if not dalle_gen:
        st.error("Failed to initialize generator")
        return

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà..."):
        try:
            result = dalle_gen.regenerate_image(
                prompt=img_data['prompt'],
                filename_prefix="regenerated"
            )

            # Add to session state
            new_image_data = {
                **img_data,
                'path': result['path'],
                'url': result['url'],
                'revised_prompt': result['revised_prompt'],
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            st.session_state.generated_images.append(new_image_data)
            st.session_state.prompts_data.append(new_image_data)

            st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            st.rerun()

        except Exception as e:
            st.error(f"Error: {str(e)}")


def generate_from_edited_prompt(new_prompt, original_img_data):
    """Generate image from edited prompt"""

    _, dalle_gen, _ = initialize_generators()

    if not dalle_gen:
        st.error("Failed to initialize generator")
        return

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å prompt ‡πÉ‡∏´‡∏°‡πà..."):
        try:
            result = dalle_gen.generate_image(
                prompt=new_prompt,
                filename_prefix="edited"
            )

            # Add to session state
            new_image_data = {
                **original_img_data,
                'path': result['path'],
                'url': result['url'],
                'prompt': new_prompt,
                'revised_prompt': result['revised_prompt'],
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            st.session_state.generated_images.append(new_image_data)
            st.session_state.prompts_data.append(new_image_data)

            st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å prompt ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        except Exception as e:
            st.error(f"Error: {str(e)}")


def create_video_tab():
    """Create video from images"""

    st.header("üé¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤")

    # Show Kie.ai credits at the top
    if config.KIE_API_KEY and config.KIE_API_KEY.strip():
        from kie_generator import KieGenerator
        kie_gen = KieGenerator()

        # Initialize credits in session state
        if 'kie_credits' not in st.session_state:
            st.session_state.kie_credits = None

        # Auto-load credits on first visit
        if st.session_state.kie_credits is None:
            try:
                credits_info = kie_gen.get_credits()
                st.session_state.kie_credits = credits_info
            except Exception as e:
                # Don't show error if it's 404 (endpoint not available)
                if '404' in str(e):
                    st.session_state.kie_credits = {'success': False, 'error': 'Credits API not available', 'silent': True}
                else:
                    st.session_state.kie_credits = {'success': False, 'error': str(e)}

        col_credit1, col_credit2, col_credit3 = st.columns([2, 1, 1])

        with col_credit1:
            # Show credits
            if st.session_state.kie_credits is not None:
                credits_info = st.session_state.kie_credits
                if credits_info.get('success'):
                    credits = credits_info.get('credits', 0)
                    # Format credits - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
                    if isinstance(credits, (int, float)):
                        if credits == int(credits):
                            credits_formatted = f"{int(credits):,}"
                        else:
                            credits_formatted = f"{credits:,.2f}"
                    else:
                        credits_formatted = str(credits)

                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î
                    st.success(f"üí∞ **‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {credits_formatted} credits**")
                else:
                    # Don't show error if it's silent (404)
                    if not credits_info.get('silent'):
                        st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: {credits_info.get('error', 'Unknown error')}")
                    else:
                        st.info("üí∞ **‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï:** ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ (API ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)")
            else:
                st.info("üí∞ **‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï:** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...")

        with col_credit2:
            if st.button("üîÑ Refresh ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", use_container_width=True):
                try:
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï..."):
                        credits_info = kie_gen.get_credits()
                        st.session_state.kie_credits = credits_info
                        st.rerun()
                except Exception as e:
                    st.error(f"Error: {str(e)}")

        with col_credit3:
            # Button to top up credits
            st.markdown("""
            <a href="https://kie.ai/billing" target="_blank">
                <button style="
                    width: 100%;
                    padding: 0.5rem 1rem;
                    background-color: #FF4B4B;
                    color: white;
                    border: none;
                    border-radius: 0.5rem;
                    cursor: pointer;
                    font-size: 1rem;
                    font-weight: 500;
                ">üí≥ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</button>
            </a>
            """, unsafe_allow_html=True)

        st.divider()
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Kie.ai API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
        st.divider()

    # Video generation method selection
    video_method = st.radio(
        "üé• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
        options=[
            "Sora 2 (OpenAI - ‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß AI)",
            "Veo3 (Google AI - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß)"
        ],
        help="Sora 2 = OpenAI image-to-video (1 ‡∏†‡∏≤‡∏û) | Veo3 = Google AI image-to-video ‡πÅ‡∏ö‡∏ö cinematic (1 ‡∏†‡∏≤‡∏û)"
    )

    if video_method.startswith("Sora 2"):
        create_sora2_video_section()
    elif video_method.startswith("Veo3"):
        create_veo3_video_section()


def display_image_selector_sora2(images, key_prefix):
    """Helper function to display image selector for Sora2 (single image)"""
    if not images:
        return None

    st.caption(f"‡πÅ‡∏™‡∏î‡∏á {len(images)} ‡∏†‡∏≤‡∏û")

    # Create dropdown with image names
    image_options = []
    for idx, img_data in enumerate(images):
        img_name = Path(img_data['path']).name
        timestamp = img_data.get('timestamp', '')
        image_options.append(f"{idx+1}. {img_name} ({timestamp})")

    selected_option = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
        options=image_options,
        key=f"{key_prefix}_select"
    )

    # Get selected index
    selected_idx = int(selected_option.split('.')[0]) - 1
    selected_img_data = images[selected_idx]
    selected_image_path = selected_img_data['path']

    # Show preview
    col_preview1, col_preview2, col_preview3 = st.columns([1, 2, 1])
    with col_preview2:
        st.image(str(selected_image_path), caption=Path(selected_image_path).name, width=200)
        st.caption(f"üè∑Ô∏è {selected_img_data.get('product_category', 'N/A')}")
        st.caption(f"üïê {selected_img_data.get('timestamp', 'N/A')}")

    return selected_image_path


def create_sora2_video_section():
    """Create video using Sora 2 (OpenAI image-to-video)"""
    st.subheader("üé¨ Sora 2 AI Video Generation (OpenAI)")

    # Show info about available images
    total_images = len(st.session_state.generated_images) + len(st.session_state.gallery_images)
    if total_images > 0:
        st.info(f"üìä ‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_images} ‡∏†‡∏≤‡∏û (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {len(st.session_state.generated_images)} | ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà: {len(st.session_state.gallery_images)})")
    else:
        st.info("üìù ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà hosting service")

    # Sora 2 limitations
    st.warning("‚ö†Ô∏è **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** Sora 2 ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û 1 ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (image-to-video)")
    st.error("üö´ **‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î Sora 2:** ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á (photorealistic people) ‡πÑ‡∏î‡πâ")
    st.info("üí° **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ñ‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ **Veo3** ‡πÅ‡∏ó‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)")

    # Image selection method
    col_method1, col_method2 = st.columns(2)
    with col_method1:
        image_method = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û",
            options=["üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß", "üåê ‡πÉ‡∏™‡πà URL ‡πÄ‡∏≠‡∏á"],
            key="sora2_image_method"
        )

    # Initialize image_url
    image_url = ""
    selected_image_path = None

    if image_method == "üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß":
        # Try to get images from folder first
        from pathlib import Path
        images_path = Path("results/images")
        folder_images = []

        if images_path.exists():
            image_files = sorted(
                [p for p in images_path.glob("*.png") if not p.name.startswith("temp_")],
                key=lambda p: p.stat().st_mtime,
                reverse=True
            )
            # Convert folder images to dict format
            for img_path in image_files[:50]:  # Limit to 50 latest images
                folder_images.append({
                    'path': str(img_path),
                    'product_category': 'N/A',
                    'timestamp': datetime.fromtimestamp(img_path.stat().st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                })

        # Combine all sources
        all_gallery_images = st.session_state.generated_images + st.session_state.gallery_images + folder_images

        if all_gallery_images:
            # Add filter tabs
            tab_filter1, tab_filter2, tab_filter3, tab_filter4 = st.tabs(["üì∏ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "üÜï ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "üóÇÔ∏è ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß", "üìÅ ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"])

            with tab_filter1:
                selected_image_path = display_image_selector_sora2(all_gallery_images, "sora2_all")

            with tab_filter2:
                if st.session_state.generated_images:
                    selected_image_path = display_image_selector_sora2(st.session_state.generated_images, "sora2_recent")
                else:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                    selected_image_path = None

            with tab_filter3:
                if st.session_state.gallery_images:
                    selected_image_path = display_image_selector_sora2(st.session_state.gallery_images, "sora2_archived")
                else:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                    selected_image_path = None

            with tab_filter4:
                if folder_images:
                    selected_image_path = display_image_selector_sora2(folder_images, "sora2_folder")
                else:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå results/images")
                    selected_image_path = None

            if selected_image_path:
                st.info("üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà imgbb ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ '‡πÉ‡∏™‡πà URL ‡πÄ‡∏≠‡∏á'")

    else:
        # Manual URL input
        st.info("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà hosting service (‡πÄ‡∏ä‡πà‡∏ô imgbb.com, imgur.com) ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà URL ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
        image_url = st.text_input(
            "üåê URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sora 2)",
            key="sora2_img_url",
            help="‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á public accessible)"
        )

    # Option to generate video prompt
    col_vprompt1, col_vprompt2 = st.columns([3, 1])

    with col_vprompt1:
        st.subheader("üìù Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")

    with col_vprompt2:
        if st.button("üé¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á Video Prompt", key="sora2_gen_prompt", use_container_width=True):
            # Get product info from latest generated image if available
            if st.session_state.generated_images:
                latest = st.session_state.generated_images[-1]
                product_cat = latest.get('product_category', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤ (Shoes)')
                gender_val = latest.get('gender', '‡∏´‡∏ç‡∏¥‡∏á (Female)')
                age_val = latest.get('age_range', '18-25')
            else:
                product_cat = "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤ (Shoes)"
                gender_val = "‡∏´‡∏ç‡∏¥‡∏á (Female)"
                age_val = "18-25"

            # Generate video prompt
            from prompt_generator import PromptGenerator
            prompt_gen = PromptGenerator()

            # Use Minimal Background as default for video
            default_location = "Minimal Background (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)"

            video_prompt_generated = prompt_gen.generate_video_prompt(
                product_category=product_cat,
                gender=gender_val,
                age_range=age_val,
                location=default_location
            )

            st.session_state['sora2_video_prompt'] = video_prompt_generated
            st.rerun()

    # Video prompt text area
    default_sora2_prompt = st.session_state.get('sora2_video_prompt',
        "A woman is standing in a natural pose, wearing stylish shoes. She gently lifts one foot with toes touching the ground, pointing slightly down to highlight the footwear. After a brief pause, she slowly starts walking forward in a relaxed, smooth motion. The camera stays low and focused only on her legs and shoes ‚Äî no face shown.")

    video_prompt = st.text_area(
        "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß)",
        value=default_sora2_prompt,
        height=150,
        help="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£"
    )

    # Video settings
    st.subheader("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")

    col1, col2, col3 = st.columns(3)

    with col1:
        aspect_ratio = st.selectbox(
            "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏≤‡∏û",
            options=["portrait", "landscape"],
            index=0,
            help="portrait = 9:16 (‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠) | landscape = 16:9 (‡∏à‡∏≠‡∏Å‡∏ß‡πâ‡∏≤‡∏á)"
        )

    with col2:
        remove_watermark = st.checkbox(
            "‡∏•‡∏ö Watermark",
            value=True,
            help="‡∏•‡∏ö watermark ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"
        )

    with col3:
        video_filename = st.text_input(
            "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            value=f"sora2_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
        )

    # Create video button
    if st.button("üé¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Sora 2", type="primary", use_container_width=True):
        if not config.KIE_API_KEY:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Kie.ai API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á (Sora 2 ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô Kie.ai)")
            return

        # Check if we have image (either URL or selected from folder)
        if not image_url.strip() and not selected_image_path:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û")
            return

        if not video_prompt.strip():
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
            return

        # If selected from folder, upload to imgbb first
        final_image_url = image_url
        if selected_image_path and not image_url:
            if not config.IMGBB_API_KEY:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å imgbb API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
                st.info("üí° ‡∏Ç‡∏≠ API Key ‡∏ü‡∏£‡∏µ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: https://api.imgbb.com/")
                return

            with st.spinner("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ó‡∏µ‡πà imgbb..."):
                try:
                    from kie_generator import KieGenerator
                    kie_gen = KieGenerator()
                    final_image_url = kie_gen.upload_image_to_imgbb(
                        str(selected_image_path),
                        config.IMGBB_API_KEY
                    )
                    st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                except Exception as e:
                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û: {str(e)}")
                    return

        # Start timer
        import time
        start_time = time.time()
        start_datetime = datetime.now()

        st.info(f"‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {start_datetime.strftime('%H:%M:%S')}")

        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Sora 2... (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ)"):
            try:
                sora_creator = Sora2VideoCreator()

                result = sora_creator.create_video_from_image(
                    image_url=final_image_url,
                    prompt=video_prompt,
                    filename=video_filename,
                    aspect_ratio=aspect_ratio,
                    remove_watermark=remove_watermark
                )

                # Calculate elapsed time
                end_time = time.time()
                elapsed_seconds = int(end_time - start_time)
                elapsed_minutes = elapsed_seconds // 60
                elapsed_secs = elapsed_seconds % 60

                if elapsed_minutes > 0:
                    elapsed_str = f"{elapsed_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ {elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
                else:
                    elapsed_str = f"{elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"

                st.session_state.video_path = result['path']

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡∏á list
                video_data = {
                    'path': result['path'],
                    'method': 'Sora 2',
                    'task_id': result.get('task_id', ''),
                    'prompt': video_prompt,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'filename': Path(result['path']).name,
                    'elapsed_time': elapsed_str
                }
                st.session_state.generated_videos.append(video_data)

                st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Sora 2 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {elapsed_str})")
                st.info(f"üìù Task ID: {result['task_id']}")
                st.info(f"üåê Image URL: {final_image_url}")

                # Refresh credits after video creation
                st.session_state.kie_credits = None
                st.rerun()

            except Exception as e:
                # Calculate elapsed time even on error
                end_time = time.time()
                elapsed_seconds = int(end_time - start_time)
                elapsed_minutes = elapsed_seconds // 60
                elapsed_secs = elapsed_seconds % 60

                if elapsed_minutes > 0:
                    elapsed_str = f"{elapsed_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ {elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
                else:
                    elapsed_str = f"{elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"

                error_msg = str(e)
                st.error(f"‚ùå Sora 2 Error: {error_msg}")
                st.warning(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô error: {elapsed_str}")

                # Provide helpful suggestions based on error
                if "photorealistic people" in error_msg.lower() or "contains people" in error_msg.lower():
                    st.warning("üö´ **‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á** - Sora 2 ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á")
                    st.info("üí° **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 2 ‡∏ß‡∏¥‡∏ò‡∏µ:**")
                    st.markdown("""
                    1. **‡πÉ‡∏ä‡πâ Veo3 ‡πÅ‡∏ó‡∏ô** - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)
                    2. **‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô** - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
                    """)
                elif "invalid image" in error_msg.lower() or "image format" in error_msg.lower():
                    st.info("üí° ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                else:
                    st.info("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ **Veo3** ‡πÅ‡∏ó‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ support ‡∏Ç‡∏≠‡∏á Kie.ai")

    # Display latest video only
    if st.session_state.generated_videos:
        st.divider()
        total_videos = len(st.session_state.generated_videos)
        st.subheader("‚úÖ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        st.caption(f"‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_videos} ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö üé¨ Video Gallery")

        # Show latest video
        latest_video = st.session_state.generated_videos[-1]

        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        col1, col2, col3 = st.columns([2, 1, 2])
        with col2:
            st.video(str(latest_video['path']))
            st.caption(f"üìÅ {latest_video['filename']}")
            st.caption(f"‚öôÔ∏è {latest_video['method']} | üïê {latest_video['timestamp']}")
            if 'elapsed_time' in latest_video:
                st.caption(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {latest_video['elapsed_time']}")

        # Download button
        with open(latest_video['path'], 'rb') as video_file:
            video_bytes = video_file.read()
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ",
                data=video_bytes,
                file_name=latest_video['filename'],
                mime="video/mp4",
                use_container_width=True
            )

        st.info(f"üìÇ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: `results/videos/`")



def create_veo3_video_section():
    """Create video using Veo3 AI"""
    st.subheader("üé¨ Veo3 AI Video Generation")

    # Explain Veo3 capabilities
    st.info("""
    ‚ú® **Veo3 ‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏à‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß** (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Sora 2)
    - ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û **1 ‡∏†‡∏≤‡∏û** ‡πÅ‡∏•‡πâ‡∏ß Google AI ‡∏à‡∏∞**‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß**
    - ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡∏û‡∏π‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö cinematic
    - **‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà**‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÑ‡∏•‡∏î‡πå‡πÇ‡∏ä‡∏ß‡πå ‡πÅ‡∏ï‡πà AI ‡∏à‡∏∞**‡πÄ‡∏à‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà**‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    """)

    st.info("""
    ‚è±Ô∏è **Veo3 ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 3-5 ‡∏ô‡∏≤‡∏ó‡∏µ** (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
    üí° **‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Sora 2** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏Å‡∏ß‡πà‡∏≤)
    """)

    st.success("""
    üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:** ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡∏†‡∏≤‡∏û ‚Üí ‡πÉ‡∏™‡πà prompt ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢ ‚Üí AI ‡πÄ‡∏à‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß (3-5 ‡∏ô‡∏≤‡∏ó‡∏µ)
    """)

    # Show info about available images
    total_images = len(st.session_state.generated_images) + len(st.session_state.gallery_images)
    if total_images > 0:
        st.info(f"üìä ‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_images} ‡∏†‡∏≤‡∏û (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {len(st.session_state.generated_images)} | ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà: {len(st.session_state.gallery_images)})")
    else:
        st.info("üìù ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà hosting service")

    # Veo3 accepts 1 image (image-to-video)
    st.warning("‚ö†Ô∏è **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** Veo3 ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û **1 ‡∏†‡∏≤‡∏û** ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏à‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Sora 2)")

    # Image selection method
    col_method1, col_method2 = st.columns(2)
    with col_method1:
        image_method = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û",
            options=["üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß", "üåê ‡πÉ‡∏™‡πà URL ‡πÄ‡∏≠‡∏á"],
            key="veo3_image_method"
        )

    # Initialize variables
    image_urls = []
    selected_image_paths = []

    if image_method == "üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß":
        # Try to get images from folder first
        from pathlib import Path
        images_path = Path("results/images")
        folder_images = []

        if images_path.exists():
            image_files = sorted(
                [p for p in images_path.glob("*.png") if not p.name.startswith("temp_")],
                key=lambda p: p.stat().st_mtime,
                reverse=True
            )
            # Convert folder images to dict format
            for img_path in image_files[:50]:  # Limit to 50 latest images
                folder_images.append({
                    'path': str(img_path),
                    'product_category': 'N/A',
                    'timestamp': datetime.fromtimestamp(img_path.stat().st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                })

        # Combine all sources
        all_gallery_images = st.session_state.generated_images + st.session_state.gallery_images + folder_images

        if all_gallery_images:
            # Add filter tabs
            tab_filter1, tab_filter2, tab_filter3, tab_filter4 = st.tabs(["üì∏ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "üÜï ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "üóÇÔ∏è ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß", "üìÅ ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"])

            with tab_filter1:
                selected_image_path = display_image_selector_sora2(all_gallery_images, "veo3_all")
                selected_image_paths = [selected_image_path] if selected_image_path else []

            with tab_filter2:
                if st.session_state.generated_images:
                    selected_image_path = display_image_selector_sora2(st.session_state.generated_images, "veo3_recent")
                    selected_image_paths = [selected_image_path] if selected_image_path else []
                else:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                    selected_image_paths = []

            with tab_filter3:
                if st.session_state.gallery_images:
                    selected_image_path = display_image_selector_sora2(st.session_state.gallery_images, "veo3_archived")
                    selected_image_paths = [selected_image_path] if selected_image_path else []
                else:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                    selected_image_paths = []

            with tab_filter4:
                if folder_images:
                    selected_image_path = display_image_selector_sora2(folder_images, "veo3_folder")
                    selected_image_paths = [selected_image_path] if selected_image_path else []
                else:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå results/images")
                    selected_image_paths = []

            if selected_image_paths:
                st.info("üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà imgbb ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ '‡πÉ‡∏™‡πà URL ‡πÄ‡∏≠‡∏á'")

    else:
        # Manual URL input (single image only)
        st.info("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà hosting service (‡πÄ‡∏ä‡πà‡∏ô imgbb.com, imgur.com) ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà URL ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")

        url = st.text_input(
            "üåê URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û",
            key=f"veo_img_url_single",
            help="‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û 1 ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ AI ‡πÄ‡∏à‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß"
        )
        if url:
            image_urls.append(url)

    # Option to generate video prompt
    col_vprompt1, col_vprompt2 = st.columns([3, 1])

    with col_vprompt1:
        st.subheader("üìù Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")

    with col_vprompt2:
        if st.button("üé¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á Video Prompt", use_container_width=True):
            # Get product info from latest generated image if available
            if st.session_state.generated_images:
                latest = st.session_state.generated_images[-1]
                product_cat = latest.get('product_category', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤ (Shoes)')
                gender_val = latest.get('gender', '‡∏´‡∏ç‡∏¥‡∏á (Female)')
                age_val = latest.get('age_range', '18-25')
            else:
                product_cat = "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤ (Shoes)"
                gender_val = "‡∏´‡∏ç‡∏¥‡∏á (Female)"
                age_val = "18-25"

            # Generate video prompt
            from prompt_generator import PromptGenerator
            prompt_gen = PromptGenerator()

            # Use Minimal Background as default for video
            default_location = "Minimal Background (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)"

            video_prompt_generated = prompt_gen.generate_video_prompt(
                product_category=product_cat,
                gender=gender_val,
                age_range=age_val,
                location=default_location
            )

            st.session_state['video_prompt'] = video_prompt_generated
            st.rerun()

    # Video prompt text area
    default_video_prompt = st.session_state.get('video_prompt',
        "Smooth transitions between product showcase images in a modern Thai cafe setting, professional commercial style, cinematic lighting, 9:16 vertical format")

    video_prompt = st.text_area(
        "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)",
        value=default_video_prompt,
        height=150,
        help="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£"
    )

    # Video settings
    col1, col2 = st.columns(2)
    with col1:
        video_filename = st.text_input(
            "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            value=f"veo3_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
        )
    with col2:
        watermark = st.text_input(
            "Watermark (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
            value="",
            help="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô watermark"
        )

    # Create video button
    if st.button("üé¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Veo3", type="primary", use_container_width=True):
        if not config.KIE_API_KEY:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Kie.ai API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
            return

        # Check if we have exactly 1 image
        if len(image_urls) < 1 and len(selected_image_paths) < 1:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û 1 ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û")
            return

        # Ensure only 1 image is used
        if len(image_urls) > 1:
            st.warning("‚ö†Ô∏è Veo3 ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            image_urls = [image_urls[0]]

        if len(selected_image_paths) > 1:
            st.warning("‚ö†Ô∏è Veo3 ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            selected_image_paths = [selected_image_paths[0]]

        if not video_prompt.strip():
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
            return

        # If selected from folder, upload to imgbb first
        final_image_urls = image_urls.copy() if image_urls else []

        if selected_image_paths and len(final_image_urls) == 0:
            if not config.IMGBB_API_KEY:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å imgbb API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
                st.info("üí° ‡∏Ç‡∏≠ API Key ‡∏ü‡∏£‡∏µ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: https://api.imgbb.com/")
                return

            with st.spinner(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ó‡∏µ‡πà imgbb..."):
                try:
                    from kie_generator import KieGenerator
                    kie_gen = KieGenerator()

                    # Upload single image
                    img_path = selected_image_paths[0]
                    st.text(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û...")
                    uploaded_url = kie_gen.upload_image_to_imgbb(
                        str(img_path),
                        config.IMGBB_API_KEY
                    )
                    final_image_urls.append(uploaded_url)

                    st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                except Exception as e:
                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û: {str(e)}")
                    return

        # Start timer
        import time
        start_time = time.time()
        start_datetime = datetime.now()

        st.info(f"‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {start_datetime.strftime('%H:%M:%S')}")

        # Create progress placeholder
        progress_placeholder = st.empty()
        status_placeholder = st.empty()

        # Progress callback function
        def update_progress(elapsed, remaining_str, status_method):
            minutes = int(elapsed // 60)
            seconds = int(elapsed % 60)
            if minutes > 0:
                time_str = f"{minutes} ‡∏ô‡∏≤‡∏ó‡∏µ {seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            else:
                time_str = f"{seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"

            progress_placeholder.info(f"‚è∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠... ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ: **{time_str}** {remaining_str}")
            status_placeholder.caption(f"üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_method}")

        try:
            veo_creator = Veo3VideoCreator()

            # Pass progress callback
            result = veo_creator.create_video_from_images(
                image_urls=final_image_urls,
                prompt=video_prompt,
                filename=video_filename,
                aspect_ratio="9:16",
                watermark=watermark if watermark else None,
                progress_callback=update_progress
            )

            # Clear progress placeholders
            progress_placeholder.empty()
            status_placeholder.empty()

            # Calculate elapsed time
            end_time = time.time()
            elapsed_seconds = int(end_time - start_time)
            elapsed_minutes = elapsed_seconds // 60
            elapsed_secs = elapsed_seconds % 60

            if elapsed_minutes > 0:
                elapsed_str = f"{elapsed_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ {elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            else:
                elapsed_str = f"{elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"

            st.session_state.video_path = result['path']

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡∏á list
            video_data = {
                'path': result['path'],
                'method': 'Veo3',
                'task_id': result.get('task_id', ''),
                'prompt': video_prompt,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'filename': Path(result['path']).name,
                'num_images': len(final_image_urls),
                'elapsed_time': elapsed_str
            }
            st.session_state.generated_videos.append(video_data)

            st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Veo3 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {elapsed_str})")
            st.info(f"üìù Task ID: {result['task_id']}")
            st.info(f"üñºÔ∏è ‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (image-to-video)")

            # Refresh credits after video creation
            st.session_state.kie_credits = None
            st.rerun()

        except Exception as e:
            # Clear progress placeholders
            progress_placeholder.empty()
            status_placeholder.empty()

            # Calculate elapsed time even on error
            end_time = time.time()
            elapsed_seconds = int(end_time - start_time)
            elapsed_minutes = elapsed_seconds // 60
            elapsed_secs = elapsed_seconds % 60

            if elapsed_minutes > 0:
                elapsed_str = f"{elapsed_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ {elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            else:
                elapsed_str = f"{elapsed_secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"

            import traceback
            error_details = traceback.format_exc()

            st.error(f"‚ùå Veo3 Error: {str(e)}")
            st.warning(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô error: {elapsed_str}")

            # Show detailed error in expander
            with st.expander("üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Error (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)"):
                st.code(error_details)

            # Provide helpful suggestions
            error_msg = str(e).lower()
            if "timeout" in error_msg:
                st.warning("‚è±Ô∏è **Timeout** - Veo3 ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ")
                st.info("üí° **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**\n- ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏≠‡∏≤‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)\n- ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Sora 2 ‡πÅ‡∏ó‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ ~3-5 ‡∏ô‡∏≤‡∏ó‡∏µ)")
            elif "webhook" in error_msg or "callback" in error_msg:
                st.warning("üìû **Webhook Error** - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API")
                st.info("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥")
            elif "api key" in error_msg or "authorization" in error_msg:
                st.warning("üîë **API Key Error** - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Kie.ai API Key")
                st.info("üí° ‡∏Å‡∏£‡∏≠‡∏Å API Key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")
            elif "image" in error_msg and "url" in error_msg:
                st.warning("üñºÔ∏è **Image URL Error** - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
                st.info("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞ URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            else:
                st.info("üí° ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n- API Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n- ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n- ‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # Display latest video only
    if st.session_state.generated_videos:
        st.divider()
        total_videos = len(st.session_state.generated_videos)
        st.subheader("‚úÖ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        st.caption(f"‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_videos} ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö üé¨ Video Gallery")

        # Show latest video
        latest_video = st.session_state.generated_videos[-1]

        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        col1, col2, col3 = st.columns([2, 1, 2])
        with col2:
            st.video(str(latest_video['path']))
            st.caption(f"üìÅ {latest_video['filename']}")
            st.caption(f"‚öôÔ∏è {latest_video['method']} | üïê {latest_video['timestamp']}")
            if 'elapsed_time' in latest_video:
                st.caption(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {latest_video['elapsed_time']}")

        # Download button
        with open(latest_video['path'], 'rb') as video_file:
            video_bytes = video_file.read()
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ",
                data=video_bytes,
                file_name=latest_video['filename'],
                mime="video/mp4",
                use_container_width=True
            )

        st.info(f"üìÇ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: `results/videos/`")



def gallery_tab():
    """Display all generated images (recent + archived)"""

    st.header("üñºÔ∏è ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    # Combine all images (recent + archived)
    all_images = st.session_state.generated_images + st.session_state.gallery_images

    if not all_images:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà")
        return

    # Display counts
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", len(st.session_state.generated_images))
    with col2:
        st.metric("‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß", len(st.session_state.gallery_images))
    with col3:
        st.metric("‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(all_images))

    # Add tabs for filtering
    tab1, tab2, tab3 = st.tabs(["üì∏ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "üÜï ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "üóÇÔ∏è ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß"])

    with tab1:
        display_image_grid(all_images, "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    with tab2:
        if st.session_state.generated_images:
            display_image_grid(st.session_state.generated_images, "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")

    with tab3:
        if st.session_state.gallery_images:
            display_image_grid(st.session_state.gallery_images, "‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß")


def display_image_grid(images, label):
    """Helper function to display images in a grid"""
    if not images:
        return

    st.caption(f"‡πÅ‡∏™‡∏î‡∏á {len(images)} ‡∏†‡∏≤‡∏û")

    # Display in grid
    cols_per_row = 3

    for i in range(0, len(images), cols_per_row):
        cols = st.columns(cols_per_row)

        for j in range(cols_per_row):
            idx = i + j
            if idx < len(images):
                img_data = images[idx]

                with cols[j]:
                    try:
                        image = Image.open(img_data['path'])
                        # Create thumbnail copy for preview
                        img_preview = image.copy()
                        img_preview.thumbnail((400, 400))
                        st.image(img_preview, width=400, caption=f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {Path(img_data['path']).name}")
                        st.caption(f"{img_data['product_category']}")
                        st.caption(f"üïê {img_data['timestamp']}")
                    except Exception as e:
                        st.error(f"Error: {e}")


def video_gallery_tab():
    """Display all generated videos"""

    st.header("üé¨ ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    if not st.session_state.generated_videos:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà")
        return

    # Display count
    total_videos = len(st.session_state.generated_videos)
    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_videos)

    # Info about folder
    st.info(f"üìÇ **‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_videos} ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà:** `results/videos/`")

    # Button to open folder
    if st.button("üìÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        import subprocess
        import os
        folder_path = os.path.abspath("results/videos")
        try:
            subprocess.Popen(f'explorer "{folder_path}"')
            st.success("‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß!")
        except Exception as e:
            st.error(f"Error: {e}")

    st.divider()

    # Display videos in grid (2 columns)
    cols_per_row = 2

    # Show in reverse order (newest first)
    for i in range(0, total_videos, cols_per_row):
        cols = st.columns(cols_per_row)

        for j in range(cols_per_row):
            idx = total_videos - 1 - (i + j)  # Reverse index
            if idx >= 0:
                video_data = st.session_state.generated_videos[idx]

                with cols[j]:
                    try:
                        # Video preview
                        st.video(str(video_data['path']))

                        # Info
                        st.caption(f"üìÅ **{video_data['filename']}**")
                        st.caption(f"‚öôÔ∏è {video_data['method']}")
                        st.caption(f"üïê {video_data['timestamp']}")
                        if 'elapsed_time' in video_data:
                            st.caption(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {video_data['elapsed_time']}")

                        # Download button
                        with open(video_data['path'], 'rb') as video_file:
                            video_bytes = video_file.read()
                            st.download_button(
                                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                                data=video_bytes,
                                file_name=video_data['filename'],
                                mime="video/mp4",
                                key=f"download_video_{idx}",
                                use_container_width=True
                            )

                        st.divider()

                    except Exception as e:
                        st.error(f"Error: {e}")


def export_logs_to_csv():
    """Export all prompts and data to CSV"""

    if not st.session_state.prompts_data:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export")
        return

    # Prepare data for CSV
    csv_data = []
    for img_data in st.session_state.prompts_data:
        csv_data.append({
            'filename': Path(img_data['path']).name,
            'product_category': img_data['product_category'],
            'gender': img_data['gender'],
            'age_range': img_data['age_range'],
            'prompt': img_data['prompt'],
            'timestamp': img_data['timestamp'],
            'video_created': 'Yes' if st.session_state.video_path else 'No'
        })

    # Create DataFrame
    df = pd.DataFrame(csv_data)

    # Save to CSV
    csv_path = config.PROMPTS_CSV
    df.to_csv(csv_path, index=False, encoding='utf-8-sig')

    st.success(f"‚úÖ Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {csv_path}")

    # Download button
    csv_string = df.to_csv(index=False, encoding='utf-8-sig')
    st.download_button(
        label="üì• Download CSV",
        data=csv_string,
        file_name=f"prompts_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        mime="text/csv"
    )


def batch_load_products_from_folder():
    """Load all product images from upload_images folder"""
    try:
        upload_dir = config.UPLOAD_IMAGES_DIR

        # Get all image files from upload_images folder
        image_files = []
        for ext in config.ALLOWED_EXTENSIONS:
            image_files.extend(list(upload_dir.glob(f"*{ext}")))

        if not image_files:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå upload_images ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
            return

        # Store in session state
        st.session_state.batch_products = [str(img) for img in image_files]
        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(image_files)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£!")
        st.rerun()

    except Exception as e:
        st.error(f"‚ùå Error loading products: {str(e)}")


def batch_generate_all_products(
    product_category,
    gender,
    age_range,
    photo_style,
    location,
    camera_angle,
    custom_details,
    num_images_per_product,
    ai_engine
):
    """Generate images for all products in batch"""

    if 'batch_products' not in st.session_state or not st.session_state.batch_products:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå' ‡∏Å‡πà‡∏≠‡∏ô")
        return

    # Validate API keys
    if ai_engine == "Kie.ai Nano Banana (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î! ‡πÑ‡∏°‡πà‡∏°‡∏µ Content Filter)":
        if not config.KIE_API_KEY:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Kie.ai API Key")
            return
        if not config.IMGBB_API_KEY:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å imgbb API Key")
            return
        if not config.GEMINI_API_KEY:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Gemini API Key")
            return

    total_products = len(st.session_state.batch_products)
    total_images = total_products * num_images_per_product

    st.info(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {total_products} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏ß‡∏° {total_images} ‡∏†‡∏≤‡∏û)")

    # Progress tracking
    overall_progress = st.progress(0)
    status_container = st.empty()

    # Initialize prompt generator
    prompt_gen = PromptGenerator()

    # Loop through each product
    for product_idx, product_path in enumerate(st.session_state.batch_products):
        try:
            product_name = Path(product_path).name
            status_container.text(f"üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product_idx + 1}/{total_products}: {product_name}")

            # Set as current reference image
            st.session_state.uploaded_reference_images = [product_path]

            # Generate prompt for this product
            generated_prompt = prompt_gen.generate_image_prompt_v2(
                product_category=product_category,
                gender=gender,
                age_range=age_range,
                photo_style=photo_style,
                location=location,
                camera_angle=camera_angle,
                custom_details=custom_details
            )

            # Generate images for this product
            generate_images_from_prompt(
                prompt=generated_prompt,
                product_category=product_category,
                gender=gender,
                age_range=age_range,
                num_images=num_images_per_product,
                ai_engine=ai_engine,
                advanced_params=None,
                photo_style=photo_style,
                location=location,
                camera_angle=camera_angle
            )

            # Update overall progress
            progress = (product_idx + 1) / total_products
            overall_progress.progress(progress)

        except Exception as e:
            st.error(f"‚ùå Error generating images for {product_name}: {str(e)}")
            continue

    status_container.empty()
    overall_progress.empty()

    st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(st.session_state.generated_images)} ‡∏†‡∏≤‡∏û")
    st.balloons()

    # Show gallery
    show_latest_images_gallery(n=12)


if __name__ == "__main__":
    main()
